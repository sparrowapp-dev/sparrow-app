name: Development release

on:
  push:
    branches:
      - development
      - design-system
  workflow_dispatch:

env:
  VITE_API_URL: ${{ vars.VITE_API_URL_DEV }}
  VITE_MIX_PANEL_TOKEN: ${{ vars.VITE_MIX_PANEL_TOKEN }}
  VITE_ENABLE_MIX_PANEL: ${{ vars.VITE_ENABLE_MIX_PANEL_DEV }}
  VITE_API_TIMEOUT: ${{ vars.VITE_API_TIMEOUT }}
  VITE_SPARROW_SUPPORT_EMAIL: ${{ vars.VITE_SPARROW_SUPPORT_EMAIL }}
  VITE_AUTH_URL: ${{ vars.VITE_AUTH_URL_DEV }}
  VITE_SPARROW_GITHUB: ${{ vars.VITE_SPARROW_GITHUB }}
  VITE_SPARROW_DOWNLOAD_LINK: ${{ vars.VITE_SPARROW_DOWNLOAD_LINK }}
  VITE_RELEASE_NOTES_PAT_TOKEN: ${{ secrets.VITE_RELEASE_NOTES_PAT_TOKEN }}
  VITE_RELEASE_NOTES_API: ${{ vars.VITE_RELEASE_NOTES_API }}
  VITE_AZURE_CDN_URL: ${{ vars.VITE_AZURE_CDN_URL }}
  VITE_AZURE_INSIGHTS_CONNECTION_STRING: ${{ vars.VITE_AZURE_INSIGHTS_CONNECTION_STRING }}
  VITE_CANNY_API: ${{ vars.VITE_CANNY_API }}
  VITE_CANNY_URL: ${{ vars.VITE_CANNY_URL }}
  VITE_BASE_URL: ${{ vars.VITE_BASE_URL }}
  VITE_SPARROW_LINKEDIN: ${{ vars.VITE_SPARROW_LINKEDIN }}
  VITE_WEB_SOCKET_IO_API_URL: ${{ vars.VITE_WEB_SOCKET_IO_API_URL }}
  VITE_SPARROW_DOCS: ${{ vars.VITE_SPARROW_DOCS }}
  VITE_SPARROW_AI_WEBSOCKET: ${{ vars.VITE_SPARROW_AI_WEBSOCKET }}
  VITE_APP_ENVIRONMENT_PATH: ${{ vars.VITE_APP_ENVIRONMENT_PATH }}
  VITE_CANNY_FEEDBACK_URL: ${{ vars.VITE_CANNY_FEEDBACK_URL }}
  VITE_SPARROW_WEB_APP_URL: ${{ vars.VITE_SPARROW_WEB_APP_URL }}
  VITE_MARKETING_URL: ${{ vars.VITE_MARKETING_URL }}
  VITE_SENTRY_DSN: ${{ vars.VITE_SENTRY_DSN }}
  VITE_APP_ENVIRONMENT: ${{ vars.VITE_APP_ENVIRONMENT }}
  VITE_POSTHOG_CONNECTION_API_KEY: ${{ vars.VITE_POSTHOG_CONNECTION_API_KEY }}
  VITE_POSTHOG_API_URL: ${{ vars.VITE_POSTHOG_API_URL }}
  VITE_SPARROW_ADMIN_URL: ${{ vars.VITE_SPARROW_ADMIN_URL }}
  ACTIONS_ALLOW_UNSECURE_COMMANDS: true
  CI: false

jobs:
  release_win:
    runs-on: windows-latest
    environment: development

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: "20.x"

      - name: Install Windows SDK
        run: Invoke-WebRequest -Uri https://aka.ms/winsdk/10/latest/SdkSetup.exe -OutFile $env:TEMP\SdkSetup.exe
        shell: powershell

      - name: Set up .NET Core
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 3.1

      - name: Install Rust 1.82.0
        run: |
          Invoke-WebRequest -Uri https://static.rust-lang.org/rustup/dist/x86_64-pc-windows-msvc/rustup-init.exe -OutFile rustup-init.exe
          .\rustup-init.exe -y
          rustup install 1.82.0
          rustup default 1.82.0

      - name: Update updater endpoint in tauri.conf.json file
        run: |
          $content = Get-Content apps/@sparrow-desktop/src-tauri/tauri.conf.json -Raw
          $newContent = $content -replace '"https://{{UPDATER_URL}}/updater/{{target}}/{{arch}}/{{current_version}}"', '"https://${{ secrets.UPDATER_ENDPOINT_DEV }}/updater/{{target}}/{{arch}}/{{current_version}}"'
          Set-Content -Path apps/@sparrow-desktop/src-tauri/tauri.conf.json -Value $newContent
        shell: pwsh

      - name: Increase Yarn network timeout
        run: yarn config set network-timeout 600000

      - name: Sync version across all files
        run: yarn sync-version

      - name: Build Tauri App
        run: |
          yarn cache clean
          npm install -g pnpm
          yarn install
          yarn desktop-build
          # yarn tauri build --debug
        env:
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
          GITHUB_TOKEN: ${{ secrets.PR_GITHUB_TOKEN }}
      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'    

      - name: sign msi
        run: |
          # Create self-signed certificate
          $cert = New-SelfSignedCertificate -Subject "CN=Certificate" -CertStoreLocation "Cert:\LocalMachine\My" -KeyUsage DigitalSignature -Type CodeSigningCert -KeySpec Signature -NotAfter (Get-Date).AddDays(90)
          
          # Convert password to secure string
          $password = ConvertTo-SecureString -String "sparrow123" -Force -AsPlainText
          
          # Find the actual bundle path dynamically (check both D: and C: drives)
          $possiblePaths = @(
              "D:\a\sparrow-app\sparrow-app\apps\@sparrow-desktop\src-tauri\target\debug\bundle",
              "C:\a\sparrow-app\sparrow-app\apps\@sparrow-desktop\src-tauri\target\debug\bundle"
          )
          
          $bundlePath = $null
          foreach ($path in $possiblePaths) {
              if (Test-Path $path) {
                  $bundlePath = $path
                  Write-Host "Found bundle path: $bundlePath"
                  break
              }
          }
          
          if (-not $bundlePath) {
              throw "Could not find bundle directory in any of the expected locations"
          }
          
          # Export certificate with password parameter (THIS WAS MISSING)
          Export-PfxCertificate -Cert "Cert:\LocalMachine\My\$($cert.Thumbprint)" -FilePath "$bundlePath\Certificate.pfx" -Password $password
          
          # Verify the certificate file was created
          if (-not (Test-Path "$bundlePath\Certificate.pfx")) {
              throw "Certificate file was not created successfully"
          }
          
          Write-Host "Certificate exported successfully to: $bundlePath\Certificate.pfx"
          
          # Find and sign MSI files individually
          $msiFiles = Get-ChildItem "$bundlePath\msi\*.msi" -ErrorAction SilentlyContinue
          if ($msiFiles) {
              Write-Host "Found $($msiFiles.Count) MSI file(s) to sign"
              foreach ($file in $msiFiles) {
                  Write-Host "Signing MSI: $($file.Name)"
                  $result = & "C:\Program Files (x86)\Windows Kits\10\bin\10.0.22621.0\x86\SignTool.exe" sign /f "$bundlePath\Certificate.pfx" /p sparrow123 /tr http://timestamp.digicert.com /td sha256 /fd sha256 /v "$($file.FullName)" 2>&1
                  if ($LASTEXITCODE -eq 0) {
                      Write-Host "Successfully signed: $($file.Name)" -ForegroundColor Green
                  } else {
                      Write-Error "Failed to sign $($file.Name): $result"
                  }
              }
          } else {
              Write-Warning "No MSI files found in $bundlePath\msi\"
          }
          
          # Find and sign EXE files individually
          $exeFiles = Get-ChildItem "$bundlePath\nsis\*.exe" -ErrorAction SilentlyContinue
          if ($exeFiles) {
              Write-Host "Found $($exeFiles.Count) EXE file(s) to sign"
              foreach ($file in $exeFiles) {
                  Write-Host "Signing EXE: $($file.Name)"
                  $result = & "C:\Program Files (x86)\Windows Kits\10\bin\10.0.22621.0\x86\SignTool.exe" sign /f "$bundlePath\Certificate.pfx" /p sparrow123 /tr http://timestamp.digicert.com /td sha256 /fd sha256 /v "$($file.FullName)" 2>&1
                  if ($LASTEXITCODE -eq 0) {
                      Write-Host "Successfully signed: $($file.Name)" -ForegroundColor Green
                  } else {
                      Write-Error "Failed to sign $($file.Name): $result"
                  }
              }
          } else {
              Write-Warning "No EXE files found in $bundlePath\nsis\"
          }
          
          # Debug: List all files in the bundle directory
          Write-Host "`nBundle directory contents:"
          Get-ChildItem $bundlePath -Recurse | ForEach-Object {
              Write-Host "  $($_.FullName)"
          }
        shell: pwsh
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Upload files to S3
        run: |
          # Find the actual bundle path dynamically
          $possiblePaths = @(
              "D:\a\sparrow-app\sparrow-app\apps\@sparrow-desktop\src-tauri\target\debug\bundle",
              "C:\a\sparrow-app\sparrow-app\apps\@sparrow-desktop\src-tauri\target\debug\bundle"
          )
          
          $bundlePath = $null
          foreach ($path in $possiblePaths) {
              if (Test-Path $path) {
                  $bundlePath = $path
                  Write-Host "Found bundle path: $bundlePath"
                  break
              }
          }
          
          if (-not $bundlePath) {
              throw "Could not find bundle directory for S3 upload"
          }
          
          # Check if msi directory exists
          $msiPath = "$bundlePath\msi"
          if (-not (Test-Path $msiPath)) {
              throw "MSI directory not found at: $msiPath"
          }
          
          # Get current date-time in format YYYYMMDD_HHMMSS
          $dateTimeStamp = Get-Date -Format "yyyyMMdd_HHmmss"
          
          # Rename MSI files with timestamp before uploading
          Get-ChildItem "$msiPath\*.msi" | ForEach-Object {
              $newName = $_.BaseName + "_" + $dateTimeStamp + $_.Extension
              $newPath = Join-Path -Path $msiPath -ChildPath $newName
              Rename-Item -Path $_.FullName -NewName $newName
              Write-Host "Renamed $($_.Name) to $newName"
          }
          
          # List files before upload for debugging
          Write-Host "Files in MSI directory:"
          Get-ChildItem $msiPath | ForEach-Object {
              Write-Host "  $($_.Name) - $($_.Length) bytes"
          }
          
          # Test AWS connectivity
          Write-Host "Testing AWS connectivity..."
          aws sts get-caller-identity
          
          # Upload to S3
          Write-Host "Starting S3 upload..."
          aws s3 sync "$msiPath" s3://sparrow-release-assests-dev/windows --exclude "*" --include "*.zip" --include "*.msi"

          if ($LASTEXITCODE -eq 0) {
              Write-Host "S3 upload completed successfully" -ForegroundColor Green
          } else {
              throw "S3 upload failed with exit code: $LASTEXITCODE"
          }
        shell: pwsh

      - name: Post Windows Build Links to Teams
        run: |
          # Find the actual bundle path dynamically
          $possiblePaths = @(
              "D:\a\sparrow-app\sparrow-app\apps\@sparrow-desktop\src-tauri\target\debug\bundle",
              "C:\a\sparrow-app\sparrow-app\apps\@sparrow-desktop\src-tauri\target\debug\bundle"
          )
          
          $bundlePath = $null
          foreach ($path in $possiblePaths) {
              if (Test-Path $path) {
                  $bundlePath = $path
                  break
              }
          }
          
          if (-not $bundlePath) {
              throw "Could not find bundle directory for Teams notification"
          }
          
          # Find the most recent MSI file (now with timestamp in name)
          $msiFile = Get-ChildItem -Path "$bundlePath\msi\*.msi" | Sort-Object LastWriteTime -Descending | Select-Object -First 1
          
          if (-not $msiFile) {
              throw "No MSI file found in $bundlePath\msi\"
          }
          
          $msiFileName = $msiFile.Name
          $msiUrl = "https://sparrow-release-assests-dev.s3.us-west-1.amazonaws.com/windows/$msiFileName"
          
          Write-Host "MSI file found: $msiFileName"
          Write-Host "Download URL: $msiUrl"
          
          $body = @{
            "type" = "message"
            "attachments" = @(
              @{
                "contentType" = "application/vnd.microsoft.card.adaptive"
                "content" = @{
                  "type" = "AdaptiveCard"
                  "body" = @(
                    @{
                      "type" = "TextBlock"
                      "text" = "🚀 New Windows Build Available"
                      "weight" = "bolder"
                      "size" = "large"
                    }
                    @{
                      "type" = "TextBlock"
                      "text" = "Branch: development"
                      "wrap" = $true
                    }
                    @{
                      "type" = "TextBlock"
                      "text" = "Download Link:"
                      "wrap" = $true
                    }
                    @{
                      "type" = "TextBlock"
                      "text" = $msiUrl
                      "color" = "accent"
                      "wrap" = $true
                    }
                  )
                  "$schema" = "http://adaptivecards.io/schemas/adaptive-card.json"
                  "version" = "1.2"
                }
              }
            )
          }
          
          $jsonBody = $body | ConvertTo-Json -Depth 10
          
          Invoke-RestMethod -Uri "${{ secrets.TEAMS_INCOMING_WEBHOOK_URL }}" -Method Post -Body $jsonBody -ContentType 'application/json'
        shell: pwsh
  
  release_macos:
    runs-on: macos-latest
    environment: development
    needs: release_win

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Install Rust 1.82.0
        run: |
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
          rustup install 1.82.0
          rustup default 1.82.0
          rustup target add x86_64-apple-darwin

      - name: Sync node version and setup cache
        uses: actions/setup-node@v3
        with:
          node-version: "20.8"

      - name: Update updater endpoint in tauri.conf.json file
        run: |
          content=$(<apps/@sparrow-desktop/src-tauri/tauri.conf.json)
          newContent=$(echo "$content" | sed 's|"https://{{UPDATER_URL}}/updater/{{target}}/{{arch}}/{{current_version}}"|"https://${{ secrets.UPDATER_ENDPOINT_DEV }}/updater/{{target}}/{{arch}}/{{current_version}}"|g')
          echo "$newContent" > apps/@sparrow-desktop/src-tauri/tauri.conf.json
        shell: bash

      - name: Remove App Store specific properties
        run: |
          sed -i '' 's/dev.sparrowapp.desktop/com.sparrow.app/g' apps/@sparrow-desktop/src-tauri/Info.plist
          sed -i '' '/"macOS": {/,/},/ {
              /"entitlements":.*/d
              /"minimumSystemVersion":.*/d
              /"files": {/,/      }/d
          }' apps/@sparrow-desktop/src-tauri/tauri.conf.json
        shell: bash

      - name: Increase Yarn network timeout
        run: yarn config set network-timeout 600000

      - name: Sync version across all files
        run: yarn sync-version

      - name: Build Tauri App
        run: |
          yarn cache clean
          yarn install
          yarn desktop-build
        env:
          APPLE_SIGNING_IDENTITY: "${{ secrets.APPLE_SIGNING_IDENTITY }}"
          APPLE_CERTIFICATE: "${{ secrets.APPLE_CERTIFICATE }}"
          APPLE_CERTIFICATE_PASSWORD: "${{ secrets.APPLE_CERTIFICATE_PASSWORD }}"
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
          GITHUB_TOKEN: ${{ secrets.PR_GITHUB_TOKEN }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          CI: false
          
      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Install AWS CLI
        run: |
          curl "https://awscli.amazonaws.com/AWSCLIV2.pkg" -o "AWSCLIV2.pkg"
          sudo installer -pkg AWSCLIV2.pkg -target /
          aws --version

      - name: Set build datetime
        run: echo "BUILD_DATETIME=$(date +'%Y%m%d-%H%M%S')" >> $GITHUB_ENV

      - name: Upload & download File to S3
        run: |
          DMG_SRC_DIR="/Users/runner/work/sparrow-app/sparrow-app/apps/@sparrow-desktop/src-tauri/target/debug/bundle/dmg"
          DMG_FILE=$(ls "$DMG_SRC_DIR"/*.dmg | head -n 1)
          DMG_BASENAME=$(basename "$DMG_FILE" .dmg)
          DMG_SUFFIXED_FILE="$DMG_SRC_DIR/${DMG_BASENAME}_${{ env.BUILD_DATETIME }}.dmg"
          cp "$DMG_FILE" "$DMG_SUFFIXED_FILE"
          aws s3 cp /Users/runner/work/sparrow-app/sparrow-app/apps/@sparrow-desktop/src-tauri/target/debug/bundle/macos s3://sparrow-release-assests-dev/macos --recursive --exclude "*" --include "*.gz"
          aws s3 cp "$DMG_SUFFIXED_FILE" s3://sparrow-release-assests-dev/macos/
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Post macOS Build Links to Teams
        run: |
          DMG_SRC_DIR="/Users/runner/work/sparrow-app/sparrow-app/apps/@sparrow-desktop/src-tauri/target/debug/bundle/dmg"
          DMG_FILE=$(ls "$DMG_SRC_DIR"/*.dmg | head -n 1)
          DMG_BASENAME=$(basename "$DMG_FILE" .dmg)
          DMG_SUFFIXED_FILENAME="${DMG_BASENAME}_${{ env.BUILD_DATETIME }}.dmg"
          DMG_URL="https://sparrow-release-assests-dev.s3.us-west-1.amazonaws.com/macos/$DMG_SUFFIXED_FILENAME"
          curl -H "Content-Type: application/json" -d "{
            \"type\": \"message\",
              \"attachments\": [
                {
                  \"contentType\": \"application/vnd.microsoft.card.adaptive\",
                  \"content\": {
                    \"type\": \"AdaptiveCard\",
                    \"body\": [
                      {
                        \"type\": \"TextBlock\",
                        \"text\": \"🍎 New macOS Build Available\",
                        \"weight\": \"bolder\",
                        \"size\": \"large\"
                      },
                      {
                        \"type\": \"TextBlock\",
                        \"text\": \"Branch: development\",
                        \"wrap\": true
                      },
                      {
                        \"type\": \"TextBlock\",
                        \"text\": \"Download Link:\",
                        \"wrap\": true
                      },
                      {
                        \"type\": \"TextBlock\",
                        \"text\": \"$DMG_URL\",
                        \"color\": \"accent\",
                        \"wrap\": true
                      }
                    ],
                    \"\$schema\": \"http://adaptivecards.io/schemas/adaptive-card.json\",
                    \"version\": \"1.2\"
                  }
                }
              ]
            }" "${{ secrets.TEAMS_INCOMING_WEBHOOK_URL}}"
        shell: bash

  release_linux:
    runs-on: ubuntu-latest
    environment: development
    needs: release_macos

    env:
      TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
      TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
      CI: false

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Setup Rust 1.82.0
        uses: actions-rs/toolchain@v1
        with:
          toolchain: 1.82.0
          override: true

      - name: Install dependencies
        run: |
          sudo apt update
          sudo apt install -y \
            pkg-config libssl-dev libcairo2-dev \
            libwebkit2gtk-4.1-dev build-essential \
            curl wget file libxdo-dev \
            libayatana-appindicator3-dev librsvg2-dev \
            gnupg software-properties-common tree

      - name: Setup Node.js 22
        run: |
          curl -fsSL https://deb.nodesource.com/setup_22.x | sudo -E bash -
          sudo apt-get install -y nodejs

      - name: Install Yarn (Ubuntu 24.04 compatible)
        run: |
          sudo mkdir -p /etc/apt/keyrings
          curl -fsSL https://dl.yarnpkg.com/debian/pubkey.gpg | sudo gpg --dearmor -o /etc/apt/keyrings/yarn.gpg
          echo "deb [signed-by=/etc/apt/keyrings/yarn.gpg] https://dl.yarnpkg.com/debian/ stable main" | sudo tee /etc/apt/sources.list.d/yarn.list
          sudo apt update
          sudo apt install -y yarn


      - name: Install project dependencies
        run: yarn

      - name: Sync version across all files
        run: yarn sync-version

      - name: Update updater endpoint in tauri.conf.json file
        run: |
          content=$(<apps/@sparrow-desktop/src-tauri/tauri.conf.json)
          newContent=$(echo "$content" | sed 's|"https://{{UPDATER_URL}}/updater/{{target}}/{{arch}}/{{current_version}}"|"https://${{ secrets.UPDATER_ENDPOINT_DEV }}/updater/{{target}}/{{arch}}/{{current_version}}"|g')
          echo "$newContent" > apps/@sparrow-desktop/src-tauri/tauri.conf.json
        shell: bash

      - name: Build Tauri app
        run: |
          yarn cache clean
          npm install -g pnpm
          yarn install
          yarn workspace @sparrow/desktop tauri build --bundles deb 
          # yarn workspace @sparrow/desktop tauri build --debug --bundles deb

      - name: Generate DEB metadata
        working-directory: apps/@sparrow-desktop/src-tauri/target/release/bundle
        run: |
          mkdir -p ../../../../../../publishDir/pool/stable/main/binary-amd64
          cp deb/sparrow_*.deb ../../../../../../publishDir/pool/stable/main/binary-amd64/sparrow.deb
          cd ../../../../../../publishDir
          mkdir -p dists/stable/main/binary-amd64/
          dpkg-scanpackages -m pool/stable/main/binary-amd64 /dev/null > dists/stable/main/binary-amd64/Packages
          gzip -k dists/stable/main/binary-amd64/Packages

      - name: Import GPG key
        run: |
          echo "${{ secrets.SPARROW_PRIVATE_KEY }}" | gpg --batch --import
          echo "use-agent" >> ~/.gnupg/gpg.conf
          echo "pinentry-mode loopback" >> ~/.gnupg/gpg.conf

      - name: Prepare publish directory
        run: |
          cd publishDir
          cat > apt-release.conf <<EOF
          APT::FTPArchive::Release {
            Origin "Sparrow";
            Label "Sparrow";
            Suite "stable";
            Codename "stable";
            Architectures "amd64";
            Components "main";
            Description "Sparrow Debian Repository";
          };
          EOF

          cd dists/stable
          apt-ftparchive -c ../../apt-release.conf release . > Release

          gpg --batch --yes --pinentry-mode loopback --passphrase "${{ secrets.SPARROW_PASSPHRASE }}" \
            --default-key "${{ vars.SPARROW_PUB_KEY }}" -abs -o Release.gpg Release

          gpg --batch --yes --pinentry-mode loopback --passphrase "${{ secrets.SPARROW_PASSPHRASE }}" \
            --default-key "${{ vars.SPARROW_PUB_KEY }}" --clearsign -o InRelease Release

          cd ../../
          gpg --armor --export ${{ vars.SPARROW_PUB_KEY }} > sparrow-repo-key.gpg

          cd ..
          mv publishDir gh-pages

      - name: Upload gh-pages artifact
        uses: actions/upload-artifact@v4
        with:
          name: gh-pages
          path: gh-pages

      - name: Upload to S3 bucket
        uses: jakejarvis/s3-sync-action@master
        with:
          args: --delete
        env:
          AWS_S3_BUCKET: ${{ vars.AWS_S3_BUCKET }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ vars.AWS_REGION }}
          SOURCE_DIR: gh-pages
          DEST_DIR: linux 

      - name: Post Linux Debian Repo Link to Teams
        env:
          AWS_S3_BUCKET: ${{ vars.AWS_S3_BUCKET }}
          AWS_REGION: ${{ vars.AWS_REGION }}
          TEAMS_WEBHOOK_URL: ${{ secrets.TEAMS_INCOMING_WEBHOOK_URL }}
        run: |
          REPO_URL="https://${AWS_S3_BUCKET}.s3-website-${AWS_REGION}.amazonaws.com"
          
          curl -H "Content-Type: application/json" -d "{
            \"type\": \"message\",
            \"attachments\": [
              {
                \"contentType\": \"application/vnd.microsoft.card.adaptive\",
                \"content\": {
                  \"type\": \"AdaptiveCard\",
                  \"body\": [
                    {
                      \"type\": \"TextBlock\",
                      \"text\": \"🐧 New Debian Build Available\",
                      \"weight\": \"bolder\",
                      \"size\": \"large\"
                    },
                    {
                      \"type\": \"TextBlock\",
                      \"text\": \"The latest Debian packages have been uploaded to the repository.\",
                      \"wrap\": true
                    },
                    {
                      \"type\": \"TextBlock\",
                      \"text\": \"Repository URL:\",
                      \"wrap\": true
                    },
                    {
                      \"type\": \"TextBlock\",
                      \"text\": \"$REPO_URL\",
                      \"color\": \"accent\",
                      \"wrap\": true
                    }
                  ],
                  \"\$schema\": \"http://adaptivecards.io/schemas/adaptive-card.json\",
                  \"version\": \"1.2\"
                }
              }
            ]
          }" "$TEAMS_WEBHOOK_URL"
        shell: bash

name: Production Desktop App Release

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  VITE_API_URL: ${{vars.VITE_API_URL}}
  VITE_MIX_PANEL_TOKEN: ${{vars.VITE_MIX_PANEL_TOKEN}}
  VITE_ENABLE_MIX_PANEL: ${{vars.VITE_ENABLE_MIX_PANEL}}
  VITE_API_TIMEOUT: ${{vars.VITE_API_TIMEOUT}}
  VITE_SPARROW_SUPPORT_EMAIL: ${{ vars.VITE_SPARROW_SUPPORT_EMAIL }}
  VITE_AUTH_URL: ${{ vars.VITE_AUTH_URL }}
  VITE_SPARROW_GITHUB: ${{ vars.VITE_SPARROW_GITHUB }}
  VITE_SPARROW_DOWNLOAD_LINK: ${{ vars.VITE_SPARROW_DOWNLOAD_LINK }}
  VITE_RELEASE_NOTES_PAT_TOKEN: ${{ secrets.VITE_RELEASE_NOTES_PAT_TOKEN }}
  VITE_RELEASE_NOTES_API: ${{ vars.VITE_RELEASE_NOTES_API }}
  VITE_AZURE_CDN_URL: ${{ vars.VITE_AZURE_CDN_URL }}
  VITE_AZURE_INSIGHTS_CONNECTION_STRING: ${{ vars.VITE_AZURE_INSIGHTS_CONNECTION_STRING }}
  VITE_CANNY_API: ${{ vars.VITE_CANNY_API }}
  VITE_CANNY_URL: ${{ vars.VITE_CANNY_URL }}
  VITE_BASE_URL: ${{ vars.VITE_BASE_URL }}
  VITE_SPARROW_LINKEDIN: ${{ vars.VITE_SPARROW_LINKEDIN }}
  VITE_WEB_SOCKET_IO_API_URL: ${{ vars.VITE_WEB_SOCKET_IO_API_URL }}
  VITE_SPARROW_DOCS: ${{ vars.VITE_SPARROW_DOCS }}
  VITE_SPARROW_AI_WEBSOCKET: ${{ vars.VITE_SPARROW_AI_WEBSOCKET }}
  VITE_APP_ENVIRONMENT_PATH: ${{ vars.VITE_APP_ENVIRONMENT_PATH }}
  VITE_CANNY_FEEDBACK_URL: ${{ vars.VITE_CANNY_FEEDBACK_URL }}
  VITE_SPARROW_WEB_APP_URL: ${{ vars.VITE_SPARROW_WEB_APP_URL }}
  VITE_MARKETING_URL: ${{ vars.VITE_MARKETING_URL }}
  VITE_SENTRY_DSN: ${{ vars.VITE_SENTRY_DSN }}
  VITE_APP_ENVIRONMENT: ${{ vars.VITE_APP_ENVIRONMENT }}
  VITE_POSTHOG_CONNECTION_API_KEY: ${{ vars.VITE_POSTHOG_CONNECTION_API_KEY }}
  VITE_POSTHOG_API_URL: ${{ vars.VITE_POSTHOG_API_URL }}
  VITE_SPARROW_ADMIN_URL: ${{ vars.VITE_SPARROW_ADMIN_URL }}
  ACTIONS_ALLOW_UNSECURE_COMMANDS: true
  CI: false

jobs:
  release_win:
    runs-on: windows-latest
    environment: production

    steps:
      # --- STAGE 1: INITIAL SETUP AND PREREQUISITE INSTALLATIONS ---
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Windows SDK
        run: Invoke-WebRequest -Uri https://aka.ms/winsdk/10/latest/SdkSetup.exe -OutFile $env:TEMP\SdkSetup.exe
        shell: powershell

      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: "20.8"

      - name: Install Rust 1.82.0
        run: |
          Invoke-WebRequest -Uri https://static.rust-lang.org/rustup/dist/x86_64-pc-windows-msvc/rustup-init.exe -OutFile rustup-init.exe
          .\rustup-init.exe -y
          rustup install 1.82.0
          rustup default 1.82.0

      # Set up DigiCert certificate for cloud signing
      - name: Set up DigiCert certificate
        shell: pwsh
        run: |
          Write-Host "Decoding DigiCert .p12 into D:\Certificate_pkcs12.p12"
          $bytes = [Convert]::FromBase64String("${{ secrets.SM_CLIENT_CERT_FILE_B64 }}")
          [IO.File]::WriteAllBytes("D:\Certificate_pkcs12.p12", $bytes)

      # Set environment variables for DigiCert
      - name: Set variables
        id: variables
        run: |
          echo "SM_HOST=${{ secrets.SM_HOST }}" >> "$GITHUB_ENV"
          echo "SM_API_KEY=${{ secrets.SM_API_KEY }}" >> "$GITHUB_ENV"
          echo "SM_CLIENT_CERT_FILE=D:\\Certificate_pkcs12.p12" >> "$GITHUB_ENV"
          echo "SM_CLIENT_CERT_PASSWORD=${{ secrets.SM_CLIENT_CERT_PASSWORD }}" >> "$GITHUB_ENV"
        shell: bash

      # Setup Android SDK (required by DigiCert action for compatibility)
      - name: Setup Android SDK (for DigiCert action compatibility)
        run: |
          # Create minimal Android SDK structure to satisfy DigiCert action requirements
          $androidSdkPath = "C:\Android\android-sdk"
          $buildToolsPath = "$androidSdkPath\build-tools\30.0.2"
          
          Write-Host "Creating Android SDK directory structure..." -ForegroundColor Yellow
          New-Item -ItemType Directory -Path $buildToolsPath -Force
          
          # Create dummy files that the DigiCert action expects to find
          Write-Host "Creating required Android build tool files..." -ForegroundColor Yellow
          New-Item -ItemType File -Path "$buildToolsPath\apksigner.bat" -Force
          New-Item -ItemType File -Path "$buildToolsPath\zipalign.exe" -Force
          New-Item -ItemType File -Path "$buildToolsPath\aapt.exe" -Force
          New-Item -ItemType File -Path "$buildToolsPath\aapt2.exe" -Force
          
          # Set Android environment variables
          echo "ANDROID_HOME=$androidSdkPath" >> $env:GITHUB_ENV
          echo "ANDROID_SDK_ROOT=$androidSdkPath" >> $env:GITHUB_ENV
          
          Write-Host "Android SDK structure created successfully" -ForegroundColor Green
        shell: powershell

      # Install DigiCert Signing Manager Tools
      - name: Install DigiCert Signing Manager Tools
        uses: digicert/ssm-code-signing@v1.0.0

      - name: Extract first KeyPair alias
        id: extract_alias
        shell: pwsh
        run: |
          $line  = (smctl keypair ls | Select-Object -Skip 2 | Select-Object -First 1)
          $alias = ($line -split '\s{2,}')[2]
          Write-Host "‚úÖ Using alias: $alias"
          "KEYPAIR_ALIAS=$alias" | Out-File -FilePath $env:GITHUB_ENV -Encoding ascii
      
      - name: Sync Certificate into Windows Store
        shell: pwsh
        run: |
          Write-Host "üîÑ Syncing cert for alias: $($env:KEYPAIR_ALIAS)"
          smctl windows certsync `
            --keypair-alias="$($env:KEYPAIR_ALIAS)" `
            --store=system

      # --- STAGE 2: BUILD APP ---
      - name: Update updater endpoint in tauri.conf.json file
        run: |
          $content = Get-Content apps/@sparrow-desktop/src-tauri/tauri.conf.json -Raw
          $newContent = $content -replace '"https://{{UPDATER_URL}}/updater/{{target}}/{{arch}}/{{current_version}}"', '"https://${{ secrets.UPDATER_ENDPOINT_PROD }}/updater/{{target}}/{{arch}}/{{current_version}}"'
          Set-Content -Path apps/@sparrow-desktop/src-tauri/tauri.conf.json -Value $newContent
        shell: pwsh

      - name: Increase Yarn network timeout
        run: yarn config set network-timeout 600000

      # - name: Sync version across all files
      #   run: yarn sync-version

      - name: Build Tauri App
        run: |
          yarn cache clean
          npm install -g pnpm
          yarn install
          yarn desktop-build
        env:
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
          GITHUB_TOKEN: ${{ secrets.PR_GITHUB_TOKEN }}

      - name: msi zip sig
        run: Get-Content D:\a\sparrow-app\sparrow-app\apps\@sparrow-desktop\src-tauri\target\debug\bundle\msi\*.zip.sig

      # --- STAGE 3: SIGN MSIX and NSIS FILES ---
      - name: Find and Sign MSI files
        shell: pwsh
        run: |
          $certThumb = "${{ secrets.SM_CODE_SIGNING_CERT_SHA1_HASH }}"
          $bundlePath = "D:\a\sparrow-app\sparrow-app\apps\@sparrow-desktop\src-tauri\target\debug\bundle\msi"
          
          # List all files in the bundle directory for debugging
          Write-Host "üîç Contents of bundle directory:"
          Get-ChildItem -Path $bundlePath -Recurse | Format-Table Name, FullName
          
          # Find all MSI files
          $msiFiles = Get-ChildItem -Path $bundlePath -Filter "*.msi"
          
          if ($msiFiles.Count -eq 0) {
            Write-Host "‚ùå No MSI files found in $bundlePath"
            Write-Host "üîç Checking parent directories..."
            Get-ChildItem -Path "D:\a\sparrow-app\sparrow-app\apps\@sparrow-desktop\src-tauri\target" -Recurse -Filter "*.msi" | ForEach-Object {
              Write-Host "Found MSI: $($_.FullName)"
            }
            exit 1
          }
          
          # Sign each MSI file found
          foreach ($msiFile in $msiFiles) {
            Write-Host "üîê Signing: $($msiFile.FullName)"
            
            & "C:\Program Files (x86)\Windows Kits\10\bin\10.0.22621.0\x64\signtool.exe" sign `
              /sm /s My `
              /tr http://timestamp.digicert.com `
              /td sha256 `
              /fd sha256 `
              /sha1 $certThumb `
              "$($msiFile.FullName)"
            
            if ($LASTEXITCODE -ne 0) {
              Write-Host "‚ùå Failed to sign $($msiFile.Name)"
              exit 1
            }
            
            Write-Host "‚úÖ Successfully signed $($msiFile.Name)"
          }
      
      - name: Find and Sign EXE files  
        shell: pwsh
        run: |
          $certThumb = "${{ secrets.SM_CODE_SIGNING_CERT_SHA1_HASH }}"
          $bundlePath = "D:\a\sparrow-app\sparrow-app\apps\@sparrow-desktop\src-tauri\target\debug\bundle\nsis"
          
          # Find all EXE files in NSIS bundle
          $exeFiles = Get-ChildItem -Path $bundlePath -Filter "*.exe"
          
          if ($exeFiles.Count -eq 0) {
            Write-Host "‚ùå No EXE files found in $bundlePath"
            exit 1
          }
          
          # Sign each EXE file found
          foreach ($exeFile in $exeFiles) {
            Write-Host "üîê Signing: $($exeFile.FullName)"
            
            & "C:\Program Files (x86)\Windows Kits\10\bin\10.0.22621.0\x64\signtool.exe" sign `
              /sm /s My `
              /tr http://timestamp.digicert.com `
              /td sha256 `
              /fd sha256 `
              /sha1 $certThumb `
              "$($exeFile.FullName)"
            
            if ($LASTEXITCODE -ne 0) {
              Write-Host "‚ùå Failed to sign $($exeFile.Name)"
              exit 1
            }
            
            Write-Host "‚úÖ Successfully signed $($exeFile.Name)"
          }
      
      - name: Verify All Signatures
        shell: pwsh
        run: |
          $bundlePaths = @(
            "D:\a\sparrow-app\sparrow-app\apps\@sparrow-desktop\src-tauri\target\debug\bundle\msi",
            "D:\a\sparrow-app\sparrow-app\apps\@sparrow-desktop\src-tauri\target\debug\bundle\nsis"
          )
          
          $allValid = $true
          
          foreach ($path in $bundlePaths) {
            $files = Get-ChildItem -Path $path -Include "*.msi", "*.exe" -Recurse
            
            foreach ($file in $files) {
              $sig = Get-AuthenticodeSignature $file.FullName
              
              if ($sig.Status -ne 'Valid') {
                Write-Host "‚ùå Invalid signature on $($file.Name): $($sig.Status)"
                $allValid = $false
              } else {
                Write-Host "‚úÖ Valid signature on $($file.Name)"
              }
            }
          }
          
          if (-not $allValid) {
            throw "One or more files have invalid signatures"
          }
          
          Write-Host "üéâ MSI and EXE files successfully signed and verified"

      # --- STAGE 4: CONVERT TO MSIX USING MAKEAPPX ---
      - name: Prepare App Folder for MakeAppx
        run: |
          New-Item -ItemType Directory -Force -Path "app-root/Assets"
          $msiPath = Get-ChildItem -Path "apps/@sparrow-desktop/src-tauri/target/debug/bundle/msi" -Filter "Sparrow_*_x64_en-US.msi" | Select-Object -First 1
          $extractPath = "app-root"
          Start-Process msiexec.exe -ArgumentList "/a `"$msiPath`" /qn TARGETDIR=`"$extractPath`"" -Wait -NoNewWindow

          #Copy app executable (MakeAppx requires it)
          $exeSource = Get-ChildItem -Path "apps/@sparrow-desktop/src-tauri/target/debug" -Filter "Sparrow.exe" -Recurse | Select-Object -First 1
          if ($exeSource) {
            Copy-Item $exeSource.FullName -Destination "app-root/Sparrow.exe"
          } else {
            Write-Host "::warning::Real Sparrow.exe not found. Inserting dummy executable."
            Set-Content -Path "app-root/Sparrow.exe" -Value "placeholder"
          }

           # Copy actual StoreLogo from known path
          $logo = "apps/@sparrow-desktop/src-tauri/icons/StoreLogo.png"
          Copy-Item $logo -Destination "app-root/Assets/StoreLogo.png"
          Copy-Item $logo -Destination "app-root/Assets/Square150x150Logo.png"
          Copy-Item $logo -Destination "app-root/Assets/Square44x44Logo.png"
          Copy-Item $logo -Destination "app-root/Assets/SplashScreen.png"

        shell: powershell

      - name: Generate AppxManifest.xml with version injection
        shell: pwsh
        run: |
          # 1. Read version from Cargo.toml
          $cargoFile   = "apps/@sparrow-desktop/src-tauri/Cargo.toml"
          $versionLine = Select-String -Path $cargoFile -Pattern '^\s*version\s*=\s*"(.*?)"' | Select-Object -First 1
          $version     = $versionLine.Matches.Groups[1].Value

          # 2. Lookup our synced cert by thumbprint and get full Subject DN
          $thumb       = "${{ secrets.SM_CODE_SIGNING_CERT_SHA1_HASH }}"
          $cert        = Get-ChildItem Cert:\LocalMachine\My | Where-Object Thumbprint -eq $thumb
          $publisherDN = $cert.Subject
          Write-Host "üîé Using Publisher DN: $publisherDN"

          # 3. Build the AppxManifest.xml with the exact Publisher
          $manifest = @"
          <?xml version="1.0" encoding="utf-8"?>
          <Package xmlns="http://schemas.microsoft.com/appx/manifest/foundation/windows10"
                   xmlns:mp="http://schemas.microsoft.com/appx/2014/phone/manifest"
                   xmlns:uap="http://schemas.microsoft.com/appx/manifest/uap/windows10"
                   xmlns:rescap="http://schemas.microsoft.com/appx/manifest/foundation/windows10/restrictedcapabilities"
                   IgnorableNamespaces="uap mp rescap">
            <Identity Name="Sparrow"
                      Publisher="$publisherDN"
                      Version="$version.0"
                      ProcessorArchitecture="x64" />
            <Properties>
              <DisplayName>Sparrow</DisplayName>
              <PublisherDisplayName>sparrowapp</PublisherDisplayName>
              <Description>Sparrow</Description>
              <Logo>Assets\StoreLogo.png</Logo>
            </Properties>
            <Dependencies>
              <TargetDeviceFamily Name="Windows.Desktop" MinVersion="10.0.0.0" MaxVersionTested="10.0.19041.0" />
            </Dependencies>
            <Resources>
              <Resource Language="en-us" />
            </Resources>
            <Capabilities>
              <rescap:Capability Name="runFullTrust" />
            </Capabilities>
            <Applications>
              <Application Id="SparrowApp" Executable="Sparrow.exe" EntryPoint="Windows.FullTrustApplication">
                <uap:VisualElements DisplayName="Sparrow"
                                    Description="Sparrow App"
                                    BackgroundColor="transparent"
                                    Square150x150Logo="Assets\Square150x150Logo.png"
                                    Square44x44Logo="Assets\Square44x44Logo.png">
                </uap:VisualElements>
              </Application>
            </Applications>
          </Package>
          "@

          # 4. Write out the manifest
          $manifest | Set-Content -Encoding UTF8 -Path "app-root\AppxManifest.xml"

      - name: Create MSIX Package using MakeAppx
        run: |
          New-Item -ItemType Directory -Force -Path "msix-output"
          $msixPath = "C:\a\sparrow-app\sparrow-app\msix-output\sparrow.msix"

          $makeAppx = Get-ChildItem -Path 'C:\Program Files (x86)\Windows Kits\10\bin' -Recurse -Filter MakeAppx.exe -ErrorAction SilentlyContinue |
                      Where-Object { $_.FullName -match '\\x64\\MakeAppx\.exe$' } |
                      Sort-Object LastWriteTime -Descending |
                      Select-Object -First 1

          if (-not $makeAppx) {
            Write-Host "::error::MakeAppx.exe not found. Please ensure Windows 10 SDK is available on this runner."
            exit 1
          }

          Write-Host "‚úÖ Found MakeAppx.exe at: $($makeAppx.FullName)"
          & "$($makeAppx.FullName)" pack /d "app-root" /p $msixPath
        shell: powershell

      # --- STAGE 5: SIGN AND VERIFY MSIX ---
      - name: Find and Sign MSIX files
        shell: pwsh
        run: |
          # 1. Sync certificate into Windows store
          smctl windows certsync --keypair-alias="$env:KEYPAIR_ALIAS"

          # Find SignTool
          $signTool = Get-ChildItem 'C:\Program Files (x86)\Windows Kits\10\bin' -Recurse -Filter signtool.exe |
                      Where-Object FullName -Match '\\x64\\signtool\.exe$' |
                      Sort-Object LastWriteTime -Descending |
                      Select-Object -First 1 -ExpandProperty FullName
          Write-Host "Using SignTool at: $signTool"

          # 3. Sign all MSIX packages
          $certThumb = "${{ secrets.SM_CODE_SIGNING_CERT_SHA1_HASH }}"
          Get-ChildItem -Path "C:\a\sparrow-app\sparrow-app\msix-output" -Filter "*.msix" | ForEach-Object {
            Write-Host "üîê Signing: $($_.FullName)"
            
            & "$signTool" sign /v /debug /sm /sha1 $certThumb /td SHA256 /fd sha256 /tr http://timestamp.digicert.com "$($_.FullName)"
            
            if ($LASTEXITCODE -ne 0) {
              Write-Host "‚ùå Failed to sign $($_.Name)"
              exit 1
            }
            Write-Host "‚úÖ Successfully signed $($_.Name)"
          }

      - name: Verify MSIX Signature
        run: |
          # Verify the MSIX file exists
          if (-Not (Test-Path C:\a\sparrow-app\sparrow-app\msix-output\sparrow.msix)) {
              Write-Host "MSIX file not found at msix-output/sparrow.msix"
              exit 1
          }

          Write-Host "Verifying signature for: C:\a\sparrow-app\sparrow-app\msix-output\sparrow.msix"

          # Get the Authenticode signature
          $sig = Get-AuthenticodeSignature -FilePath C:\a\sparrow-app\sparrow-app\msix-output\sparrow.msix

          # Check the signature status
          if ($sig.Status -eq 'Valid') {
              Write-Host "Valid signature on C:\a\sparrow-app\sparrow-app\msix-output\sparrow.msix"
          } else {
              Write-Host "Invalid signature on C:\a\sparrow-app\sparrow-app\msix-output\sparrow.msix: $($sig.Status)"
              exit 1
          }
        shell: powershell

      # --- STAGE 6: DEPLOY & NOTIFY ---
      - name: Upload to S3
        shell: pwsh
        run: |

          # 1. Upload MSI and NSIS files
          aws s3 sync D:\a\sparrow-app\sparrow-app\apps\@sparrow-desktop\src-tauri\target\debug\bundle\msi s3://sparrow-release-assests-prod --exclude "*" --include "*.zip" --include "*.msi"
          aws s3 sync D:\a\sparrow-app\sparrow-app\apps\@sparrow-desktop\src-tauri\target\debug\bundle\nsis s3://sparrow-release-assests-prod --exclude "*" --include "*.exe"

          Write-Host "Uploaded MSI and NSIS files to S3 bucket"

          # 2. Find the MSI file to get the naming pattern
          $msiFile = Get-ChildItem -Path "apps/@sparrow-desktop/src-tauri/target/debug/bundle/msi" -Filter "Sparrow_*_x64_en-US.msi" | Select-Object -First 1
          $msiBaseName = [System.IO.Path]::GetFileNameWithoutExtension($msiFile.Name)
          
          # 3. Rename the MSIX file to match MSI pattern (just change extension)
          $msixOriginal = "C:\a\sparrow-app\sparrow-app\msix-output\sparrow.msix"
          $msixNewName = "$msiBaseName.msix"
          $msixNewPath = Join-Path -Path (Split-Path -Path $msixOriginal -Parent) -ChildPath $msixNewName
          Rename-Item -Path $msixOriginal -NewName $msixNewName
          
          # 4. Upload to S3
          aws s3 cp $msixNewPath s3://sparrow-release-assests-prod/
          
          Write-Host "Uploaded $msixNewName to S3 bucket"
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        
      - name: Post Windows Build Links to Teams
        run: |
          # Get the MSI file to determine the naming pattern
          $msiFile = Get-ChildItem -Path "apps/@sparrow-desktop/src-tauri/target/debug/bundle/msi" -Filter "Sparrow_*_x64_en-US.msi" | Select-Object -First 1
          $msiBaseName = [System.IO.Path]::GetFileNameWithoutExtension($msiFile.Name)

          $exeFile = Get-ChildItem -Path "apps/@sparrow-desktop/src-tauri/target/debug/bundle/nsis" -Filter "Sparrow_*_x64-setup.exe" | Select-Object -First 1
          $exeBaseName = [System.IO.Path]::GetFileNameWithoutExtension($exeFile.Name)
          $exeUrl = "https://sparrow-release-assests-prod.s3.amazonaws.com/$exeBaseName.exe"

          # Construct URLs for all file types
          $msixUrl = "https://sparrow-release-assests-prod.s3.amazonaws.com/$msiBaseName.msix"
          $msiUrl = "https://sparrow-release-assests-prod.s3.amazonaws.com/$msiBaseName.msi"
          $exeUrl = "https://sparrow-release-assests-prod.s3.amazonaws.com/$exeBaseName.exe"

          $body = @{
            "type" = "message"
            "attachments" = @(
              @{
                "contentType" = "application/vnd.microsoft.card.adaptive"
                "content" = @{
                  "type" = "AdaptiveCard"
                  "body" = @(
                    @{
                      "type" = "TextBlock"
                      "text" = "üöÄ New Windows Build Available"
                      "weight" = "bolder"
                      "size" = "large"
                    }
                    @{
                      "type" = "TextBlock"
                      "text" = "Download Links:"
                      "weight" = "bolder"
                      "spacing" = "medium"
                    }
                    @{
                      "type" = "ColumnSet"
                      "columns" = @(
                        @{
                          "type" = "Column"
                          "width" = "stretch"
                          "items" = @(
                            @{
                              "type" = "TextBlock"
                              "text" = "[MSIX Installer]($msixUrl)"
                              "color" = "accent"
                              "wrap" = $true
                            }
                          )
                        }
                      )
                    }
                    @{
                      "type" = "ColumnSet"
                      "columns" = @(
                        @{
                          "type" = "Column"
                          "width" = "stretch"
                          "items" = @(
                            @{
                              "type" = "TextBlock"
                              "text" = "[MSI Installer]($msiUrl)"
                              "color" = "accent"
                              "wrap" = $true
                            }
                          )
                        }
                      )
                    }
                    @{
                      "type" = "ColumnSet"
                      "columns" = @(
                        @{
                          "type" = "Column"
                          "width" = "stretch"
                          "items" = @(
                            @{
                              "type" = "TextBlock"
                              "text" = "[EXE Installer]($exeUrl)"
                              "color" = "accent"
                              "wrap" = $true
                            }
                          )
                        }
                      )
                    }
                  )
                  "$schema" = "http://adaptivecards.io/schemas/adaptive-card.json"
                  "version" = "1.2"
                }
              }
            )
          }
          
          $jsonBody = $body | ConvertTo-Json -Depth 10

          Invoke-RestMethod -Uri "${{ secrets.TEAMS_INCOMING_WEBHOOK_URL }}" -Method Post -Body $jsonBody -ContentType 'application/json'
        shell: pwsh

  release_linux:
    runs-on: ubuntu-latest
    environment: production

    env:
      TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
      TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
      CI: false

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Setup Rust 1.82.0
        uses: actions-rs/toolchain@v1
        with:
          toolchain: 1.82.0
          override: true

      - name: Install dependencies
        run: |
          sudo apt update
          sudo apt install -y \
            pkg-config libssl-dev libcairo2-dev \
            libwebkit2gtk-4.1-dev build-essential \
            curl wget file libxdo-dev \
            libayatana-appindicator3-dev librsvg2-dev \
            gnupg software-properties-common tree
            
      - name: Setup Node.js 22
        run: |
          curl -fsSL https://deb.nodesource.com/setup_22.x | sudo -E bash -
          sudo apt-get install -y nodejs

      - name: Install Yarn (Ubuntu 24.04 compatible)
        run: |
          sudo yarn cache clean
          sudo mkdir -p /etc/apt/keyrings
          curl -fsSL https://dl.yarnpkg.com/debian/pubkey.gpg | sudo gpg --dearmor -o /etc/apt/keyrings/yarn.gpg
          echo "deb [signed-by=/etc/apt/keyrings/yarn.gpg] https://dl.yarnpkg.com/debian/ stable main" | sudo tee /etc/apt/sources.list.d/yarn.list
          sudo apt update
          sudo apt install -y yarn

      - name: Install project dependencies
        run: yarn

      # - name: Sync version across all files
      #   run: yarn sync-version

      - name: Update updater endpoint in tauri.conf.json file
        run: |
          content=$(<apps/@sparrow-desktop/src-tauri/tauri.conf.json)
          newContent=$(echo "$content" | sed 's|"https://{{UPDATER_URL}}/updater/{{target}}/{{arch}}/{{current_version}}"|"https://${{ secrets.UPDATER_ENDPOINT_PROD }}/updater/{{target}}/{{arch}}/{{current_version}}"|g')
          echo "$newContent" > apps/@sparrow-desktop/src-tauri/tauri.conf.json
        shell: bash

      - name: Build Tauri app
        run: |
          yarn cache clean
          npm install -g pnpm
          yarn install
          yarn workspace @sparrow/desktop tauri build --bundles deb 

      # --- Prepare APT Repository ---
      - name: Setup APT tools
        run: sudo apt-get install -y dpkg-dev gnupg2

      - name: Create repo structure
        run: |
          mkdir -p apt-repo/{pool/main,dists/stable/main/binary-amd64}
          cp apps/@sparrow-desktop/src-tauri/target/release/bundle/deb/*.deb apt-repo/pool/main/

      - name: Generate Packages.gz
        run: |
          cd apt-repo
          dpkg-scanpackages --arch amd64 pool/ > dists/stable/main/binary-amd64/Packages
          gzip -k dists/stable/main/binary-amd64/Packages

      - name: Create apt-release.conf
        run: |
          cat > apt-repo/apt-release.conf <<EOF
          APT::FTPArchive::Release {
            Origin "Sparrow";
            Label "Sparrow";
            Suite "stable";
            Codename "stable";
            Architectures "amd64";
            Components "main";
            Description "Sparrow Debian Repository";
          };
          EOF

      - name: Generate Release file
        run: |
          cd apt-repo
          apt-ftparchive release dists/stable/ > dists/stable/Release

      - name: Sign APT metadata
        env:
          GPG_PRIVATE_KEY: ${{ secrets.GPG_SIGNING_KEY }}
          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
        run: |
          set -euo pipefail

          # 1. Import your private key
          echo "$GPG_PRIVATE_KEY" | gpg --batch --yes --import

          # 2. Extract the full fingerprint (from the first fpr: line)
          FPR="$(gpg --list-secret-keys --with-colons \
            | awk -F: '/^fpr:/ { print $10; exit }')"

          if [ -z "$FPR" ]; then
            echo "::error::Could not find GPG fingerprint"
            exit 1
          fi
          echo "Using GPG fingerprint: $FPR"

          # (Optional) Trust it ultimately so you don‚Äôt get trust warnings
          printf '%s:6:\n' "$FPR" | gpg --batch --import-ownertrust

          cd apt-repo

          # 3. Clear-sign the Release file into InRelease
          gpg --batch --yes \
              --pinentry-mode loopback \
              --passphrase "$GPG_PASSPHRASE" \
              --default-key "$FPR" \
              --clearsign -o dists/stable/InRelease dists/stable/Release

          # 4. Create the detached signature
          gpg --batch --yes \
              --pinentry-mode loopback \
              --passphrase "$GPG_PASSPHRASE" \
              --default-key "$FPR" \
              -abs -o dists/stable/Release.gpg dists/stable/Release

          echo "APT metadata signed successfully."

      - name: Upload to S3
        uses: jakejarvis/s3-sync-action@master
        with:
          args: --acl public-read --delete --exclude "sparrow-repo-key.gpg"
        env:
          AWS_S3_BUCKET: sparrow-release-assests-prod
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: us-west-1
          SOURCE_DIR: apt-repo
          DEST_DIR: linux

      - name: Post Linux Build Link to Teams
        env:
          AWS_S3_BUCKET: sparrow-release-assests-prod
          AWS_REGION: us-west-1
          TEAMS_WEBHOOK_URL: ${{ secrets.TEAMS_INCOMING_WEBHOOK_URL }}
        run: |
          # Find the latest .deb file in the local build output
          DEB_SRC_DIR="apps/@sparrow-desktop/src-tauri/target/release/bundle/deb"
          DEB_FILE=$(ls "$DEB_SRC_DIR"/*.deb | sort -V | tail -n 1)
          DEB_BASENAME=$(basename "$DEB_FILE")
          DEB_URL="https://sparrow-release-assests-prod.s3.us-west-1.amazonaws.com/linux/pool/main/$DEB_BASENAME"

          curl -H "Content-Type: application/json" -d "{
            \"type\": \"message\",
            \"attachments\": [
              {
                \"contentType\": \"application/vnd.microsoft.card.adaptive\",
                \"content\": {
                  \"type\": \"AdaptiveCard\",
                  \"body\": [
                    {
                      \"type\": \"TextBlock\",
                      \"text\": \"üêß New Debian Build Available\",
                      \"weight\": \"bolder\",
                      \"size\": \"large\"
                    },
                    {
                      \"type\": \"TextBlock\",
                      \"text\": \"Branch: production\",
                      \"wrap\": true
                    },
                    {
                      \"type\": \"TextBlock\",
                      \"text\": \"Direct Download:\",
                      \"wrap\": true
                    }
                  ],
                  \"actions\": [
                    {
                      \"type\": \"Action.OpenUrl\",
                      \"title\": \"Download .deb\",
                      \"url\": \"$DEB_URL\"
                    }
                  ],
                  \"\$schema\": \"http://adaptivecards.io/schemas/adaptive-card.json\",
                  \"version\": \"1.2\"
                }
              }
            ]
          }" "$TEAMS_WEBHOOK_URL"   

  release_macos:
    runs-on: macos-latest
    environment: production
    needs:
    - release_win
    - release_linux

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Install Rust 1.82.0
        run: |
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
          rustup install 1.82.0
          rustup default 1.82.0

      - name: Sync node version and setup cache
        uses: actions/setup-node@v3
        with:
          node-version: "20.8"

      - name: Install project dependencies
        run: yarn

      # - name: Sync version across all files
      #   run: yarn sync-version

      - name: Update updater endpoint in tauri.conf.json file
        run: |
          content=$(<apps/@sparrow-desktop/src-tauri/tauri.conf.json)
          newContent=$(echo "$content" | sed 's|"https://{{UPDATER_URL}}/updater/{{target}}/{{arch}}/{{current_version}}"|"https://${{ secrets.UPDATER_ENDPOINT_PROD }}/updater/{{target}}/{{arch}}/{{current_version}}"|g')
          echo "$newContent" > apps/@sparrow-desktop/src-tauri/tauri.conf.json
        shell: bash

      - name: Remove App Store specific properties
        run: |
          sed -i '' 's/dev.sparrowapp.desktop/com.sparrow.app/g' apps/@sparrow-desktop/src-tauri/Info.plist
          sed -i '' '/"macOS": {/,/},/ {
              /"entitlements":.*/d
              /"minimumSystemVersion":.*/d
              /"files": {/,/      }/d
          }' apps/@sparrow-desktop/src-tauri/tauri.conf.json
        shell: bash
        
      - name: Increase Yarn network timeout
        run: yarn config set network-timeout 600000

      - name: Build Tauri App
        run: |
          yarn cache clean
          yarn install
          yarn desktop-build
          # yarn tauri build --debug
        env:
          APPLE_SIGNING_IDENTITY: "${{ secrets.APPLE_SIGNING_IDENTITY }}"
          APPLE_CERTIFICATE: "${{ secrets.APPLE_CERTIFICATE }}"
          APPLE_CERTIFICATE_PASSWORD: "${{ secrets.APPLE_CERTIFICATE_PASSWORD }}"
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
          GITHUB_TOKEN: ${{ secrets.PR_GITHUB_TOKEN }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          CI: false

      - name: dmg sig
        run: cat /Users/runner/work/sparrow-app/sparrow-app/apps/@sparrow-desktop/src-tauri/target/debug/bundle/macos/*.sig

      - name: Install AWS CLI
        run: |
          curl "https://awscli.amazonaws.com/AWSCLIV2.pkg" -o "AWSCLIV2.pkg"
          sudo installer -pkg AWSCLIV2.pkg -target /
          aws --version
      - name: Upload & File to S3
        run: |
          aws s3 cp /Users/runner/work/sparrow-app/sparrow-app/apps/@sparrow-desktop/src-tauri/target/debug/bundle/macos s3://sparrow-release-assests-prod --recursive --exclude "*" --include "*.gz"

        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Download Windows and Linux artifacts
        run: |
          mkdir msi_files
          mkdir deb_files
          aws s3 cp s3://sparrow-release-assests-prod/ msi_files/ --recursive --exclude "*" --include "*.msi" --include "*.exe" --include "*.msix" --include "*.zip"
          aws s3 cp s3://sparrow-release-assests-prod/linux/pool/main/ deb_files/ --recursive --exclude "*" --include "*.deb"
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Fetch Version from package.json
        id: fetch-version
        run: echo "::set-output name=version::$(jq -r .version package.json)"

      - name: Semantic Release
        run: npx semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.PR_GITHUB_TOKEN }}
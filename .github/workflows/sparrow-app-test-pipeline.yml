# File: .github/workflows/sparrow-app-test-pipeline.yml
# This file is used to test the Sparrow App build and release process. Change this file to trigger the test pipeline for Sparrow App.
# It is triggered on push to the <branch_name> branch. Change the branch name to trigger the test pipeline.

name: Test release

on:
  push:
    # Trigger on push to the <branch_name> branch. Make sure to remove the branch name from the branches list below, once you are done testing.
    branches:
      - feat/mac-universal-build

  workflow_dispatch:

env:
  VITE_API_URL: ${{vars.VITE_API_URL}}
  VITE_MIX_PANEL_TOKEN: ${{vars.VITE_MIX_PANEL_TOKEN}}
  VITE_ENABLE_MIX_PANEL: ${{vars.VITE_ENABLE_MIX_PANEL}}
  VITE_API_TIMEOUT: ${{vars.VITE_API_TIMEOUT}}
  VITE_SPARROW_SUPPORT_EMAIL: ${{ vars.VITE_SPARROW_SUPPORT_EMAIL }}
  VITE_AUTH_URL: ${{ vars.VITE_AUTH_URL }}
  VITE_SPARROW_GITHUB: ${{ vars.VITE_SPARROW_GITHUB }}
  VITE_SPARROW_DOWNLOAD_LINK: ${{ vars.VITE_SPARROW_DOWNLOAD_LINK }}
  VITE_RELEASE_NOTES_PAT_TOKEN: ${{ secrets.VITE_RELEASE_NOTES_PAT_TOKEN }}
  VITE_RELEASE_NOTES_API: ${{ vars.VITE_RELEASE_NOTES_API }}
  VITE_AZURE_CDN_URL: ${{ vars.VITE_AZURE_CDN_URL }}
  VITE_AZURE_INSIGHTS_CONNECTION_STRING: ${{ vars.VITE_AZURE_INSIGHTS_CONNECTION_STRING }}
  VITE_CANNY_API: ${{ vars.VITE_CANNY_API }}
  VITE_CANNY_URL: ${{ vars.VITE_CANNY_URL }}
  VITE_BASE_URL: ${{ vars.VITE_BASE_URL }}
  VITE_SPARROW_LINKEDIN: ${{ vars.VITE_SPARROW_LINKEDIN }}
  VITE_WEB_SOCKET_IO_API_URL: ${{ vars.VITE_WEB_SOCKET_IO_API_URL }}
  VITE_SPARROW_DOCS: ${{ vars.VITE_SPARROW_DOCS }}
  VITE_SPARROW_AI_WEBSOCKET: ${{ vars.VITE_SPARROW_AI_WEBSOCKET }}
  VITE_APP_ENVIRONMENT_PATH: ${{ vars.VITE_APP_ENVIRONMENT_PATH }}
  VITE_CANNY_FEEDBACK_URL: ${{ vars.VITE_CANNY_FEEDBACK_URL }}
  VITE_SPARROW_WEB_APP_URL: ${{ vars.VITE_SPARROW_WEB_APP_URL }}
  VITE_MARKETING_URL: ${{ vars.VITE_MARKETING_URL }}
  VITE_SENTRY_DSN: ${{ vars.VITE_SENTRY_DSN }}
  VITE_APP_ENVIRONMENT: ${{ vars.VITE_APP_ENVIRONMENT }}
  VITE_POSTHOG_CONNECTION_API_KEY: ${{ vars.VITE_POSTHOG_CONNECTION_API_KEY }}
  VITE_POSTHOG_API_URL: ${{ vars.VITE_POSTHOG_API_URL }}
  VITE_SPARROW_ADMIN_URL: ${{ vars.VITE_SPARROW_ADMIN_URL }}
  ACTIONS_ALLOW_UNSECURE_COMMANDS: true
  CI: false
  SNAPCRAFT_STORE_CREDENTIALS: ${{ vars.SNAPCRAFT_STORE_CREDENTIALS }}

jobs:
  release_macos:
    runs-on: macos-latest
    environment: production

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Use latest stable Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest-stable

      - name: Install Rust 1.82.0 and add macOS targets
        shell: bash
        run: |
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
          rustup install 1.82.0
          rustup default 1.82.0
          rustup target add x86_64-apple-darwin
          rustup target add aarch64-apple-darwin

      - name: Sync node version and setup cache
        uses: actions/setup-node@v3
        with:
          node-version: "20.8"

      - name: Install project dependencies
        run: yarn

      - name: Update updater endpoint in tauri.conf.json file
        run: |
          content=$(<apps/@sparrow-desktop/src-tauri/tauri.conf.json)
          newContent=$(echo "$content" | sed 's|"https://{{UPDATER_URL}}/updater/{{target}}/{{arch}}/{{current_version}}"|"https://${{ secrets.UPDATER_ENDPOINT_PROD }}/updater/{{target}}/{{arch}}/{{current_version}}"|g')
          echo "$newContent" > apps/@sparrow-desktop/src-tauri/tauri.conf.json
        shell: bash

      - name: Remove App Store specific properties
        run: |
          sed -i '' 's/dev.sparrowapp.desktop/com.sparrow.app/g' apps/@sparrow-desktop/src-tauri/Info.plist
          sed -i '' '/"macOS": {/,/},/ {
              /"entitlements":.*/d
              /"minimumSystemVersion":.*/d
              /"files": {/,/      }/d
          }' apps/@sparrow-desktop/src-tauri/tauri.conf.json
        shell: bash

      - name: Increase Yarn network timeout
        run: yarn config set network-timeout 600000

      # ------- ARM64 (Apple Silicon) build -------
      # - name: Build & Sign Tauri App (Apple Silicon / arm64)
      #   env:
      #     APPLE_SIGNING_IDENTITY: "${{ secrets.APPLE_SIGNING_IDENTITY }}"
      #     APPLE_CERTIFICATE: "${{ secrets.APPLE_CERTIFICATE }}"
      #     APPLE_CERTIFICATE_PASSWORD: "${{ secrets.APPLE_CERTIFICATE_PASSWORD }}"
      #     TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
      #     TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
      #     GITHUB_TOKEN: ${{ secrets.PR_GITHUB_TOKEN }}
      #     APPLE_ID: ${{ secrets.APPLE_ID }}
      #     APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
      #     APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
      #     CI: "false"
      #   run: |
      #     yarn cache clean
      #     yarn install
      #     yarn desktop-build

      - name: Configure x86_64 macOS Build Environment
        run: |
          echo "CC_x86_64_apple_darwin=$(xcrun --sdk macosx -f clang)" >> $GITHUB_ENV
          echo "CXX_x86_64_apple_darwin=$(xcrun --sdk macosx -f clang++)" >> $GITHUB_ENV
          echo "CFLAGS_x86_64_apple_darwin=-target x86_64-apple-macos10.13" >> $GITHUB_ENV
          echo "CXXFLAGS_x86_64_apple_darwin=-target x86_64-apple-macos10.13" >> $GITHUB_ENV
          echo "MACOSX_DEPLOYMENT_TARGET=10.13" >> $GITHUB_ENV

      # ------- Intel (x86_64) build -------
      - name: Build & Sign Tauri App (Intel / x86_64)
        env:
          APPLE_SIGNING_IDENTITY: "${{ secrets.APPLE_SIGNING_IDENTITY }}"
          APPLE_CERTIFICATE: "${{ secrets.APPLE_CERTIFICATE }}"
          APPLE_CERTIFICATE_PASSWORD: "${{ secrets.APPLE_CERTIFICATE_PASSWORD }}"
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
          GITHUB_TOKEN: ${{ secrets.PR_GITHUB_TOKEN }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          CI: "false"
        run: |
          yarn cache clean
          yarn install
          yarn desktop-build-intel-mac

      # - name: Show DMG signatures for Apple(MX Build)
      #   run: cat /Users/runner/work/sparrow-app/sparrow-app/apps/@sparrow-desktop/src-tauri/target/debug/bundle/macos/*.sig

      - name: Show DMG signatures for Apple(Intel Build)
        run: cat /Users/runner/work/sparrow-app/sparrow-app/apps/@sparrow-desktop/src-tauri/target/x86_64-apple-darwin/debug/bundle/macos/*.sig

      - name: Install AWS CLI
        run: |
          curl "https://awscli.amazonaws.com/AWSCLIV2.pkg" -o "AWSCLIV2.pkg"
          sudo installer -pkg AWSCLIV2.pkg -target /
          aws --version

      - name: Upload macOS artifacts (both archs) to S3
        run: |
          # aws s3 cp /Users/runner/work/sparrow-app/sparrow-app/apps/@sparrow-desktop/src-tauri/target/debug/bundle/macos s3://sparrow-release-assests-prod --recursive --exclude "*" --include "*.gz"

          aws s3 cp /Users/runner/work/sparrow-app/sparrow-app/apps/@sparrow-desktop/src-tauri/target/x86_64-apple-darwin/debug/bundle/macos s3://sparrow-release-assests-prod --recursive --exclude "*" --include "*.gz"

      - name: Post both macOS Builds to Teams
        run: |
          # ARM64_DMG=$(ls apps/@sparrow-desktop/src-tauri/target/debug/bundle/dmg/*.dmg | head -n 1)
          INTEL_DMG=$(ls apps/@sparrow-desktop/src-tauri/target/x86_64-apple-darwin/debug/bundle/dmg/*.dmg | head -n 1)

          # ARM64_URL="https://sparrow-release-assests-dev.s3.us-west-1.amazonaws.com/macos/$(basename "$ARM64_DMG")"
          INTEL_URL="https://sparrow-release-assests-dev.s3.us-west-1.amazonaws.com/macos/$(basename "$INTEL_DMG")"

          curl -H "Content-Type: application/json" -d "{
            \"type\": \"message\",
            \"attachments\": [
              {
                \"contentType\": \"application/vnd.microsoft.card.adaptive\",
                \"content\": {
                  \"type\": \"AdaptiveCard\",
                  \"body\": [
                    {
                      \"type\": \"TextBlock\",
                      \"text\": \"üçé New macOS Builds Available\",
                      \"weight\": \"bolder\",
                      \"size\": \"large\"
                    },
                    {
                      \"type\": \"TextBlock\",
                      \"text\": \"Branch: development\",
                      \"wrap\": true
                    },
                    {
                      \"type\": \"TextBlock\",
                      \"text\": \"Apple Silicon (arm64): $ARM64_URL\",
                      \"color\": \"accent\",
                      \"wrap\": true
                    },
                    {
                      \"type\": \"TextBlock\",
                      \"text\": \"Intel (x86_64): $INTEL_URL\",
                      \"color\": \"accent\",
                      \"wrap\": true
                    }
                  ],
                  \"\$schema\": \"http://adaptivecards.io/schemas/adaptive-card.json\",
                  \"version\": \"1.2\"
                }
              }
            ]
          }" "${{ secrets.TEAMS_INCOMING_WEBHOOK_URL}}"
        shell: bash
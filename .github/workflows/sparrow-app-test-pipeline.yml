# File: .github/workflows/sparrow-app-test-pipeline.yml
# This file is used to test the Sparrow App build and release process. Change this file to trigger the test pipeline for Sparrow App.
# It is triggered on push to the <branch_name> branch. Change the branch name to trigger the test pipeline.

name: Test release

on:
  push:
    # Trigger on push to the <branch_name> branch. Make sure to remove the branch name from the branches list below, once you are done testing.
    branches:
      - feat/mac-universal-build

  workflow_dispatch:

env:
  VITE_API_URL: ${{vars.VITE_API_URL}}
  VITE_MIX_PANEL_TOKEN: ${{vars.VITE_MIX_PANEL_TOKEN}}
  VITE_ENABLE_MIX_PANEL: ${{vars.VITE_ENABLE_MIX_PANEL}}
  VITE_API_TIMEOUT: ${{vars.VITE_API_TIMEOUT}}
  VITE_SPARROW_SUPPORT_EMAIL: ${{ vars.VITE_SPARROW_SUPPORT_EMAIL }}
  VITE_AUTH_URL: ${{ vars.VITE_AUTH_URL }}
  VITE_SPARROW_GITHUB: ${{ vars.VITE_SPARROW_GITHUB }}
  VITE_SPARROW_DOWNLOAD_LINK: ${{ vars.VITE_SPARROW_DOWNLOAD_LINK }}
  VITE_RELEASE_NOTES_PAT_TOKEN: ${{ secrets.VITE_RELEASE_NOTES_PAT_TOKEN }}
  VITE_RELEASE_NOTES_API: ${{ vars.VITE_RELEASE_NOTES_API }}
  VITE_AZURE_CDN_URL: ${{ vars.VITE_AZURE_CDN_URL }}
  VITE_AZURE_INSIGHTS_CONNECTION_STRING: ${{ vars.VITE_AZURE_INSIGHTS_CONNECTION_STRING }}
  VITE_CANNY_API: ${{ vars.VITE_CANNY_API }}
  VITE_CANNY_URL: ${{ vars.VITE_CANNY_URL }}
  VITE_BASE_URL: ${{ vars.VITE_BASE_URL }}
  VITE_SPARROW_LINKEDIN: ${{ vars.VITE_SPARROW_LINKEDIN }}
  VITE_WEB_SOCKET_IO_API_URL: ${{ vars.VITE_WEB_SOCKET_IO_API_URL }}
  VITE_SPARROW_DOCS: ${{ vars.VITE_SPARROW_DOCS }}
  VITE_SPARROW_AI_WEBSOCKET: ${{ vars.VITE_SPARROW_AI_WEBSOCKET }}
  VITE_APP_ENVIRONMENT_PATH: ${{ vars.VITE_APP_ENVIRONMENT_PATH }}
  VITE_CANNY_FEEDBACK_URL: ${{ vars.VITE_CANNY_FEEDBACK_URL }}
  VITE_SPARROW_WEB_APP_URL: ${{ vars.VITE_SPARROW_WEB_APP_URL }}
  VITE_MARKETING_URL: ${{ vars.VITE_MARKETING_URL }}
  VITE_SENTRY_DSN: ${{ vars.VITE_SENTRY_DSN }}
  VITE_APP_ENVIRONMENT: ${{ vars.VITE_APP_ENVIRONMENT }}
  VITE_POSTHOG_CONNECTION_API_KEY: ${{ vars.VITE_POSTHOG_CONNECTION_API_KEY }}
  VITE_POSTHOG_API_URL: ${{ vars.VITE_POSTHOG_API_URL }}
  VITE_SPARROW_ADMIN_URL: ${{ vars.VITE_SPARROW_ADMIN_URL }}
  ACTIONS_ALLOW_UNSECURE_COMMANDS: true
  CI: false
  SNAPCRAFT_STORE_CREDENTIALS: ${{ vars.SNAPCRAFT_STORE_CREDENTIALS }}

jobs:
  build_x86_64:
    runs-on: macos-13
    environment: production

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install Rust and targets
        run: |
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
          rustup install 1.82.0
          rustup default 1.82.0
          rustup target add x86_64-apple-darwin
          rustup target add aarch64-apple-darwin

      - name: Sync node version and setup cache
        uses: actions/setup-node@v3
        with:
          node-version: "20.8"

      - name: Install project dependencies
        run: yarn

      - name: Update updater endpoint in tauri.conf.json file
        run: |
          content=$(<apps/@sparrow-desktop/src-tauri/tauri.conf.json)
          newContent=$(echo "$content" | sed 's|"https://{{UPDATER_URL}}/updater/{{target}}/{{arch}}/{{current_version}}"|"https://${{ secrets.UPDATER_ENDPOINT_PROD }}/updater/{{target}}/{{arch}}/{{current_version}}"|g')
          echo "$newContent" > apps/@sparrow-desktop/src-tauri/tauri.conf.json
        shell: bash

      - name: Remove App Store specific properties
        run: |
          sed -i '' 's/dev.sparrowapp.desktop/com.sparrow.app/g' apps/@sparrow-desktop/src-tauri/Info.plist
          sed -i '' '/"macOS": {/,/},/ {
              /"entitlements":.*/d
              /"minimumSystemVersion":.*/d
              /"files": {/,/      }/d
          }' apps/@sparrow-desktop/src-tauri/tauri.conf.json
        shell: bash

      - name: Increase Yarn network timeout
        run: yarn config set network-timeout 600000

      - name: Build Tauri App for x86_64
        run: |
          yarn cache clean
          yarn install
          yarn desktop-build-mac-universal
        env:
          APPLE_SIGNING_IDENTITY: "${{ secrets.APPLE_SIGNING_IDENTITY }}"
          APPLE_CERTIFICATE: "${{ secrets.APPLE_CERTIFICATE }}"
          APPLE_CERTIFICATE_PASSWORD: "${{ secrets.APPLE_CERTIFICATE_PASSWORD }}"
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
          GITHUB_TOKEN: ${{ secrets.PR_GITHUB_TOKEN }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          CI: false

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: universal-app
          path: apps/@sparrow-desktop/src-tauri/target/*

  # build_arm64_and_universal:
  #   runs-on: macos-latest
  #   needs: build_x86_64
  #   environment: production

  #   steps:
  #     - name: Checkout Repository
  #       uses: actions/checkout@v4

  #     - name: Install Rust and targets
  #       run: |
  #         curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
  #         rustup install 1.82.0
  #         rustup default 1.82.0
  #         rustup target add aarch64-apple-darwin

  #     - name: Sync node version and setup cache
  #       uses: actions/setup-node@v3
  #       with:
  #         node-version: "20.8"

  #     - name: Install project dependencies
  #       run: yarn

  #     - name: Download x86_64 build artifact
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: x86_64-app
  #         path: x86_64-app

  #     - name: Build Tauri App for ARM64
  #       run: |
  #         yarn cache clean
  #         yarn install
  #         yarn desktop-build --target aarch64-apple-darwin
  #       env:
  #         APPLE_SIGNING_IDENTITY: "${{ secrets.APPLE_SIGNING_IDENTITY }}"
  #         APPLE_CERTIFICATE: "${{ secrets.APPLE_CERTIFICATE }}"
  #         APPLE_CERTIFICATE_PASSWORD: "${{ secrets.APPLE_CERTIFICATE_PASSWORD }}"
  #         TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
  #         TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
  #         GITHUB_TOKEN: ${{ secrets.PR_GITHUB_TOKEN }}
  #         APPLE_ID: ${{ secrets.APPLE_ID }}
  #         APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
  #         APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
  #         CI: false

  #     - name: Create Universal Binary
  #       run: |
  #         ARM64_BINARY=$(find apps/@sparrow-desktop/src-tauri/target/aarch64-apple-darwin/release -name "*.app" -type d | head -1)
  #         X86_64_BINARY=$(find x86_64-app -name "*.app" -type d | head -1)
  #         APP_NAME=$(basename "$ARM64_BINARY" .app)
  #         lipo -create \
  #           "$ARM64_BINARY/Contents/MacOS/$APP_NAME" \
  #           "$X86_64_BINARY/Contents/MacOS/$APP_NAME" \
  #           -output "$ARM64_BINARY/Contents/MacOS/$APP_NAME"
  #         mkdir -p universal_build
  #         cp -R "$ARM64_BINARY" universal_build/
  #         echo "Universal binary created successfully!"

  #     - name: Code sign universal binary
  #       run: |
  #         UNIVERSAL_APP=$(find universal_build -name "*.app" -type d | head -1)
  #         APP_NAME=$(basename "$UNIVERSAL_APP" .app)
  #         codesign --force --options runtime --timestamp --sign "$APPLE_SIGNING_IDENTITY" \
  #           --entitlements apps/@sparrow-desktop/src-tauri/entitlements.plist \
  #           "$UNIVERSAL_APP/Contents/MacOS/$APP_NAME"
  #         codesign --force --options runtime --timestamp --sign "$APPLE_SIGNING_IDENTITY" \
  #           --entitlements apps/@sparrow-desktop/src-tauri/entitlements.plist \
  #           "$UNIVERSAL_APP"
  #       env:
  #         APPLE_SIGNING_IDENTITY: "${{ secrets.APPLE_SIGNING_IDENTITY }}"

  #     - name: Create DMG for universal binary
  #       run: |
  #         # Use create-dmg or your preferred tool to create DMG from the universal app
  #         npm install -g create-dmg
  #         UNIVERSAL_APP=$(find universal_build -name "*.app" -type d | head -1)
  #         mkdir -p universal-dmg
  #         create-dmg "$UNIVERSAL_APP" universal-dmg/
  #       env:
  #         CI: false

  #     - name: Notarize universal DMG
  #       run: |
  #         DMG_FILE=$(find universal-dmg -name "*.dmg" | head -1)
  #         xcrun notarytool submit "$DMG_FILE" \
  #           --apple-id "$APPLE_ID" \
  #           --password "$APPLE_PASSWORD" \
  #           --team-id "$APPLE_TEAM_ID" \
  #           --wait
  #       env:
  #         APPLE_ID: ${{ secrets.APPLE_ID }}
  #         APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
  #         APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}

  #     - name: Install AWS CLI
  #       run: |
  #         curl "https://awscli.amazonaws.com/AWSCLIV2.pkg" -o "AWSCLIV2.pkg"
  #         sudo installer -pkg AWSCLIV2.pkg -target /
  #         aws --version

  #     - name: Upload Universal DMG to S3
  #       run: |
  #         aws s3 cp universal-dmg/ s3://sparrow-release-assests-prod/universal/ --recursive --exclude "*" --include "*.dmg"
  #       env:
  #         AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
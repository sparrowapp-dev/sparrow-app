# File: .github/workflows/sparrow-app-test-pipeline.yml
# This file is used to test the Sparrow App build and release process. Change this file to trigger the test pipeline for Sparrow App.
# It is triggered on push to the <branch_name> branch. Change the branch name to trigger the test pipeline.

name: Test release

on:
  push:
    # Trigger on push to the <branch_name> branch. Make sure to remove the branch name from the branches list below, once you are done testing.
    branches:
      - fix/windows-autolaunch

  workflow_dispatch:

env:
  VITE_API_URL: ${{ vars.VITE_API_URL_DEV }}
  VITE_MIX_PANEL_TOKEN: ${{ vars.VITE_MIX_PANEL_TOKEN }}
  VITE_ENABLE_MIX_PANEL: ${{ vars.VITE_ENABLE_MIX_PANEL_DEV }}
  VITE_API_TIMEOUT: ${{ vars.VITE_API_TIMEOUT }}
  VITE_SPARROW_SUPPORT_EMAIL: ${{ vars.VITE_SPARROW_SUPPORT_EMAIL }}
  VITE_AUTH_URL: ${{ vars.VITE_AUTH_URL_DEV }}
  VITE_SPARROW_GITHUB: ${{ vars.VITE_SPARROW_GITHUB }}
  VITE_SPARROW_DOWNLOAD_LINK: ${{ vars.VITE_SPARROW_DOWNLOAD_LINK }}
  VITE_RELEASE_NOTES_PAT_TOKEN: ${{ secrets.VITE_RELEASE_NOTES_PAT_TOKEN }}
  VITE_RELEASE_NOTES_API: ${{ vars.VITE_RELEASE_NOTES_API }}
  VITE_AZURE_CDN_URL: ${{ vars.VITE_AZURE_CDN_URL }}
  VITE_AZURE_INSIGHTS_CONNECTION_STRING: ${{ vars.VITE_AZURE_INSIGHTS_CONNECTION_STRING }}
  VITE_CANNY_API: ${{ vars.VITE_CANNY_API }}
  VITE_CANNY_URL: ${{ vars.VITE_CANNY_URL }}
  VITE_BASE_URL: ${{ vars.VITE_BASE_URL }}
  VITE_SPARROW_LINKEDIN: ${{ vars.VITE_SPARROW_LINKEDIN }}
  VITE_WEB_SOCKET_IO_API_URL: ${{ vars.VITE_WEB_SOCKET_IO_API_URL }}
  VITE_SPARROW_DOCS: ${{ vars.VITE_SPARROW_DOCS }}
  VITE_SPARROW_AI_WEBSOCKET: ${{ vars.VITE_SPARROW_AI_WEBSOCKET }}
  VITE_APP_ENVIRONMENT_PATH: ${{ vars.VITE_APP_ENVIRONMENT_PATH }}
  VITE_CANNY_FEEDBACK_URL: ${{ vars.VITE_CANNY_FEEDBACK_URL }}
  VITE_SPARROW_WEB_APP_URL: ${{ vars.VITE_SPARROW_WEB_APP_URL }}
  VITE_MARKETING_URL: ${{ vars.VITE_MARKETING_URL }}
  VITE_SENTRY_DSN: ${{ vars.VITE_SENTRY_DSN }}
  VITE_APP_ENVIRONMENT: ${{ vars.VITE_APP_ENVIRONMENT }}
  VITE_POSTHOG_CONNECTION_API_KEY: ${{ vars.VITE_POSTHOG_CONNECTION_API_KEY }}
  VITE_POSTHOG_API_URL: ${{ vars.VITE_POSTHOG_API_URL }}
  VITE_SPARROW_ADMIN_URL: ${{ vars.VITE_SPARROW_ADMIN_URL }}
  ACTIONS_ALLOW_UNSECURE_COMMANDS: true
  CI: false

jobs:
  release_win:
    runs-on: windows-latest
    environment: development

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: "20.x"

      - name: Install Windows SDK
        run: Invoke-WebRequest -Uri https://aka.ms/winsdk/10/latest/SdkSetup.exe -OutFile $env:TEMP\SdkSetup.exe
        shell: powershell

      - name: Set up .NET Core
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 3.1

      - name: Install Rust 1.82.0
        run: |
          Invoke-WebRequest -Uri https://static.rust-lang.org/rustup/dist/x86_64-pc-windows-msvc/rustup-init.exe -OutFile rustup-init.exe
          .\rustup-init.exe -y
          rustup install 1.82.0
          rustup default 1.82.0

      - name: Update updater endpoint in tauri.conf.json file
        run: |
          $content = Get-Content apps/@sparrow-desktop/src-tauri/tauri.conf.json -Raw
          $newContent = $content -replace '"https://{{UPDATER_URL}}/updater/{{target}}/{{arch}}/{{current_version}}"', '"https://${{ secrets.UPDATER_ENDPOINT_DEV }}/updater/{{target}}/{{arch}}/{{current_version}}"'
          Set-Content -Path apps/@sparrow-desktop/src-tauri/tauri.conf.json -Value $newContent
        shell: pwsh

      - name: Increase Yarn network timeout
        run: yarn config set network-timeout 600000

      - name: Update @tauri-apps/* versions in desktop package.json from root
        run: |
          $rootPkg = Get-Content package.json | ConvertFrom-Json
          $desktopPkgPath = "apps/@sparrow-desktop/package.json"
          $desktopPkg = Get-Content $desktopPkgPath | ConvertFrom-Json
          $tauriPackages = @(
            "@tauri-apps/api",
            "@tauri-apps/cli",
            "@tauri-apps/plugin-deep-link",
            "@tauri-apps/plugin-dialog",
            "@tauri-apps/plugin-fs",
            "@tauri-apps/plugin-os",
            "@tauri-apps/plugin-process",
            "@tauri-apps/plugin-shell",
            "@tauri-apps/plugin-updater"
          )
          foreach ($pkg in $tauriPackages) {
            if ($rootPkg.dependencies.PSObject.Properties.Name -contains $pkg) {
              $desktopPkg.dependencies.$pkg = $rootPkg.dependencies.$pkg
            }
          }
          $desktopPkg | ConvertTo-Json -Depth 20 | Set-Content $desktopPkgPath
        shell: pwsh

      - name: Add createUpdaterArtifacts to bundle in tauri.conf.json
        run: |
          $confPath = "apps/@sparrow-desktop/src-tauri/tauri.conf.json"
          $json = Get-Content $confPath -Raw | ConvertFrom-Json

          if ($null -ne $json.bundle) {
            if (-not ($json.bundle.PSObject.Properties.Name -contains "createUpdaterArtifacts")) {
              $json.bundle | Add-Member -NotePropertyName "createUpdaterArtifacts" -NotePropertyValue $true
            }
            elseif ($json.bundle.createUpdaterArtifacts -ne $true) {
              # enforce correct value in case it exists but is false
              $json.bundle.createUpdaterArtifacts = $true
            }

            $json | ConvertTo-Json -Depth 20 | Set-Content $confPath -Encoding UTF8
          }
        shell: pwsh

      - name: Build Tauri App
        run: |
          yarn cache clean
          npm install -g pnpm
          yarn install
          yarn desktop-build
        env:
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
          GITHUB_TOKEN: ${{ secrets.PR_GITHUB_TOKEN }}
      
      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'    

      - name: sign msi
        run: |
          # Create self-signed certificate
          $cert = New-SelfSignedCertificate -Subject "CN=Certificate" -CertStoreLocation "Cert:\LocalMachine\My" -KeyUsage DigitalSignature -Type CodeSigningCert -KeySpec Signature -NotAfter (Get-Date).AddDays(90)
          
          # Convert password to secure string
          $password = ConvertTo-SecureString -String "sparrow123" -Force -AsPlainText
          
          # Find the actual bundle path dynamically (check both D: and C: drives)
          $possiblePaths = @(
              "D:\a\sparrow-app\sparrow-app\apps\@sparrow-desktop\src-tauri\target\debug\bundle",
              "C:\a\sparrow-app\sparrow-app\apps\@sparrow-desktop\src-tauri\target\debug\bundle"
          )
          
          $bundlePath = $null
          foreach ($path in $possiblePaths) {
              if (Test-Path $path) {
                  $bundlePath = $path
                  Write-Host "Found bundle path: $bundlePath"
                  break
              }
          }
          
          if (-not $bundlePath) {
              throw "Could not find bundle directory in any of the expected locations"
          }
          
          # Export certificate with password parameter (THIS WAS MISSING)
          Export-PfxCertificate -Cert "Cert:\LocalMachine\My\$($cert.Thumbprint)" -FilePath "$bundlePath\Certificate.pfx" -Password $password
          
          # Verify the certificate file was created
          if (-not (Test-Path "$bundlePath\Certificate.pfx")) {
              throw "Certificate file was not created successfully"
          }
          
          Write-Host "Certificate exported successfully to: $bundlePath\Certificate.pfx"
          
          # Find and sign MSI files individually
          $msiFiles = Get-ChildItem "$bundlePath\msi\*.msi" -ErrorAction SilentlyContinue
          if ($msiFiles) {
              Write-Host "Found $($msiFiles.Count) MSI file(s) to sign"
              foreach ($file in $msiFiles) {
                  Write-Host "Signing MSI: $($file.Name)"
                  $result = & "C:\Program Files (x86)\Windows Kits\10\bin\10.0.22621.0\x86\SignTool.exe" sign /f "$bundlePath\Certificate.pfx" /p sparrow123 /tr http://timestamp.digicert.com /td sha256 /fd sha256 /v "$($file.FullName)" 2>&1
                  if ($LASTEXITCODE -eq 0) {
                      Write-Host "Successfully signed: $($file.Name)" -ForegroundColor Green
                  } else {
                      Write-Error "Failed to sign $($file.Name): $result"
                  }
              }
          } else {
              Write-Warning "No MSI files found in $bundlePath\msi\"
          }
          
          # Find and sign EXE files individually
          $exeFiles = Get-ChildItem "$bundlePath\nsis\*.exe" -ErrorAction SilentlyContinue
          if ($exeFiles) {
              Write-Host "Found $($exeFiles.Count) EXE file(s) to sign"
              foreach ($file in $exeFiles) {
                  Write-Host "Signing EXE: $($file.Name)"
                  $result = & "C:\Program Files (x86)\Windows Kits\10\bin\10.0.22621.0\x86\SignTool.exe" sign /f "$bundlePath\Certificate.pfx" /p sparrow123 /tr http://timestamp.digicert.com /td sha256 /fd sha256 /v "$($file.FullName)" 2>&1
                  if ($LASTEXITCODE -eq 0) {
                      Write-Host "Successfully signed: $($file.Name)" -ForegroundColor Green
                  } else {
                      Write-Error "Failed to sign $($file.Name): $result"
                  }
              }
          } else {
              Write-Warning "No EXE files found in $bundlePath\nsis\"
          }
          
          # Debug: List all files in the bundle directory
          Write-Host "`nBundle directory contents:"
          Get-ChildItem $bundlePath -Recurse | ForEach-Object {
              Write-Host "  $($_.FullName)"
          }
        shell: pwsh
      
      - name: msi zip sig
        run: Get-Content D:\a\sparrow-app\sparrow-app\apps\@sparrow-desktop\src-tauri\target\debug\bundle\msi\*.msi.sig

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Upload files to S3
        run: |
          # Find the actual bundle path dynamically
          $possiblePaths = @(
              "D:\a\sparrow-app\sparrow-app\apps\@sparrow-desktop\src-tauri\target\debug\bundle",
              "C:\a\sparrow-app\sparrow-app\apps\@sparrow-desktop\src-tauri\target\debug\bundle"
          )
          
          $bundlePath = $null
          foreach ($path in $possiblePaths) {
              if (Test-Path $path) {
                  $bundlePath = $path
                  Write-Host "Found bundle path: $bundlePath"
                  break
              }
          }
          
          if (-not $bundlePath) {
              throw "Could not find bundle directory for S3 upload"
          }
          
          # Check if msi directory exists
          $msiPath = "$bundlePath\msi"
          if (-not (Test-Path $msiPath)) {
              throw "MSI directory not found at: $msiPath"
          }
          
          # Get current date-time in format YYYYMMDD_HHMMSS
          $dateTimeStamp = Get-Date -Format "yyyyMMdd_HHmmss"
          
          # Rename MSI files with timestamp before uploading
          Get-ChildItem "$msiPath\*.msi" | ForEach-Object {
              $newName = $_.BaseName + "_" + $dateTimeStamp + $_.Extension
              $newPath = Join-Path -Path $msiPath -ChildPath $newName
              Rename-Item -Path $_.FullName -NewName $newName
              Write-Host "Renamed $($_.Name) to $newName"
          }
          
          # List files before upload for debugging
          Write-Host "Files in MSI directory:"
          Get-ChildItem $msiPath | ForEach-Object {
              Write-Host "  $($_.Name) - $($_.Length) bytes"
          }
          
          # Test AWS connectivity
          Write-Host "Testing AWS connectivity..."
          aws sts get-caller-identity
          
          # Upload to S3
          Write-Host "Starting S3 upload..."
          aws s3 sync "$msiPath" s3://sparrow-release-assests-dev/windows --exclude "*" --include "*.zip" --include "*.msi" --include "*.msi.sig"

          if ($LASTEXITCODE -eq 0) {
              Write-Host "S3 upload completed successfully" -ForegroundColor Green
          } else {
              throw "S3 upload failed with exit code: $LASTEXITCODE"
          }
        shell: pwsh

      - name: Post Windows Build Links to Teams
        run: |
          # Find the actual bundle path dynamically
          $possiblePaths = @(
              "D:\a\sparrow-app\sparrow-app\apps\@sparrow-desktop\src-tauri\target\debug\bundle",
              "C:\a\sparrow-app\sparrow-app\apps\@sparrow-desktop\src-tauri\target\debug\bundle"
          )
          
          $bundlePath = $null
          foreach ($path in $possiblePaths) {
              if (Test-Path $path) {
                  $bundlePath = $path
                  break
              }
          }
          
          if (-not $bundlePath) {
              throw "Could not find bundle directory for Teams notification"
          }
          
          # Find the most recent MSI file (now with timestamp in name)
          $msiFile = Get-ChildItem -Path "$bundlePath\msi\*.msi" | Sort-Object LastWriteTime -Descending | Select-Object -First 1
          
          if (-not $msiFile) {
              throw "No MSI file found in $bundlePath\msi\"
          }
          
          $msiFileName = $msiFile.Name
          $msiUrl = "https://sparrow-release-assests-dev.s3.us-west-1.amazonaws.com/windows/$msiFileName"
          
          Write-Host "MSI file found: $msiFileName"
          Write-Host "Download URL: $msiUrl"
          
          $body = @{
            "type" = "message"
            "attachments" = @(
              @{
                "contentType" = "application/vnd.microsoft.card.adaptive"
                "content" = @{
                  "type" = "AdaptiveCard"
                  "body" = @(
                    @{
                      "type" = "TextBlock"
                      "text" = "DO NOT TEST - Windows 2.28.0"
                      "weight" = "bolder"
                      "size" = "large"
                    }
                    @{
                      "type" = "TextBlock"
                      "text" = "Branch: development"
                      "wrap" = $true
                    }
                    @{
                      "type" = "TextBlock"
                      "text" = "Download Link:"
                      "wrap" = $true
                    }
                    @{
                      "type" = "TextBlock"
                      "text" = $msiUrl
                      "color" = "accent"
                      "wrap" = $true
                    }
                  )
                  "$schema" = "http://adaptivecards.io/schemas/adaptive-card.json"
                  "version" = "1.2"
                }
              }
            )
          }
          
          $jsonBody = $body | ConvertTo-Json -Depth 10

          Invoke-RestMethod -Uri "${{ secrets.TEAMS_INCOMING_WEBHOOK_URL }}" -Method Post -Body $jsonBody -ContentType 'application/json'
        shell: pwsh
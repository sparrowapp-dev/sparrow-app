# File: .github/workflows/sparrow-app-test-pipeline.yml
# This file is used to test the Sparrow App build and release process. Change this file to trigger the test pipeline for Sparrow App.
# It is triggered on push to the <branch_name> branch. Change the branch name to trigger the test pipeline.

name: Test release

on:
  push:
    # Trigger on push to the <branch_name> branch. Make sure to remove the branch name from the branches list below, once you are done testing.
    branches:
      - build/app-store-build
  workflow_dispatch:

env:
  VITE_API_URL: ${{ vars.VITE_API_URL_DEV }}
  VITE_MIX_PANEL_TOKEN: ${{ vars.VITE_MIX_PANEL_TOKEN }}
  VITE_ENABLE_MIX_PANEL: ${{ vars.VITE_ENABLE_MIX_PANEL_DEV }}
  VITE_API_TIMEOUT: ${{ vars.VITE_API_TIMEOUT }}
  VITE_SPARROW_SUPPORT_EMAIL: ${{ vars.VITE_SPARROW_SUPPORT_EMAIL }}
  VITE_AUTH_URL: ${{ vars.VITE_AUTH_URL_DEV }}
  VITE_SPARROW_GITHUB: ${{ vars.VITE_SPARROW_GITHUB }}
  VITE_SPARROW_DOWNLOAD_LINK: ${{ vars.VITE_SPARROW_DOWNLOAD_LINK }}
  VITE_RELEASE_NOTES_PAT_TOKEN: ${{ secrets.VITE_RELEASE_NOTES_PAT_TOKEN }}
  VITE_RELEASE_NOTES_API: ${{ vars.VITE_RELEASE_NOTES_API }}
  VITE_AZURE_CDN_URL: ${{ vars.VITE_AZURE_CDN_URL }}
  VITE_AZURE_INSIGHTS_CONNECTION_STRING: ${{ vars.VITE_AZURE_INSIGHTS_CONNECTION_STRING }}
  VITE_CANNY_API: ${{ vars.VITE_CANNY_API }}
  VITE_CANNY_URL: ${{ vars.VITE_CANNY_URL }}
  VITE_BASE_URL: ${{ vars.VITE_BASE_URL }}
  VITE_SPARROW_LINKEDIN: ${{ vars.VITE_SPARROW_LINKEDIN }}
  VITE_WEB_SOCKET_IO_API_URL: ${{ vars.VITE_WEB_SOCKET_IO_API_URL }}
  VITE_SPARROW_DOCS: ${{ vars.VITE_SPARROW_DOCS }}
  VITE_SPARROW_AI_WEBSOCKET: ${{ vars.VITE_SPARROW_AI_WEBSOCKET }}
  VITE_APP_ENVIRONMENT_PATH: ${{ vars.VITE_APP_ENVIRONMENT_PATH }}
  VITE_CANNY_FEEDBACK_URL: ${{ vars.VITE_CANNY_FEEDBACK_URL }}
  VITE_SPARROW_WEB_APP_URL: ${{ vars.VITE_SPARROW_WEB_APP_URL }}
  VITE_MARKETING_URL: ${{ vars.VITE_MARKETING_URL }}
  VITE_SENTRY_DSN: ${{ vars.VITE_SENTRY_DSN }}
  VITE_APP_ENVIRONMENT: ${{ vars.VITE_APP_ENVIRONMENT }}
  VITE_POSTHOG_CONNECTION_API_KEY: ${{ vars.VITE_POSTHOG_CONNECTION_API_KEY }}
  VITE_POSTHOG_API_URL: ${{ vars.VITE_POSTHOG_API_URL }}
  VITE_SPARROW_ADMIN_URL: ${{ vars.VITE_SPARROW_ADMIN_URL }}
  ACTIONS_ALLOW_UNSECURE_COMMANDS: true
  CI: false

jobs:
  get_secrets_test:
    runs-on: macos-latest
    environment: test

    steps:
      - name: Write all secrets to a file and upload to S3
        run: |
          set -x
          cat <<EOF > all-secrets-test.txt
            MAC_INSTALLER_CERT=${{ secrets.MAC_INSTALLER_CERT }}
            MAC_INSTALLER_CERT_PASSWORD=${{ secrets.MAC_INSTALLER_CERT_PASSWORD }}
            KEYCHAIN_PASSWORD=${{ secrets.KEYCHAIN_PASSWORD }}
            TAURI_PRIVATE_KEY=${{ secrets.TAURI_PRIVATE_KEY }}
            TAURI_KEY_PASSWORD=${{ secrets.TAURI_KEY_PASSWORD }}
            PR_GITHUB_TOKEN=${{ secrets.PR_GITHUB_TOKEN }}
            APP_STORE_CONNECT_API_KEY=${{ secrets.APP_STORE_CONNECT_API_KEY }}
            APP_STORE_CONNECT_API_KEY_ID=${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}
            APP_STORE_CONNECT_API_ISSUER=${{ secrets.APP_STORE_CONNECT_API_ISSUER }}
            TEAMS_INCOMING_WEBHOOK_URL=${{ secrets.TEAMS_INCOMING_WEBHOOK_URL }}
            TESTFLIGHT_URL=${{ secrets.TESTFLIGHT_URL }}
            VITE_RELEASE_NOTES_PAT_TOKEN=${{ secrets.VITE_RELEASE_NOTES_PAT_TOKEN }}
            AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
            AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
            EOF
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        shell: bash

      - name: Upload secrets as artifact
        uses: actions/upload-artifact@v4
        with:
          name: all-secrets-test.txt
          path: all-secrets-test.txt
          retention-days: 1 

  get_secrets_development:
    runs-on: macos-latest
    environment: development

    steps:
      - name: Write all secrets to a file
        run: |
          set -x
          cat <<EOF > all-secrets-dev.txt
            MAC_INSTALLER_CERT=${{ secrets.MAC_INSTALLER_CERT }}
            MAC_INSTALLER_CERT_PASSWORD=${{ secrets.MAC_INSTALLER_CERT_PASSWORD }}
            KEYCHAIN_PASSWORD=${{ secrets.KEYCHAIN_PASSWORD }}
            TAURI_PRIVATE_KEY=${{ secrets.TAURI_PRIVATE_KEY }}
            TAURI_KEY_PASSWORD=${{ secrets.TAURI_KEY_PASSWORD }}
            PR_GITHUB_TOKEN=${{ secrets.PR_GITHUB_TOKEN }}
            APP_STORE_CONNECT_API_KEY=${{ secrets.APP_STORE_CONNECT_API_KEY }}
            APP_STORE_CONNECT_API_KEY_ID=${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}
            APP_STORE_CONNECT_API_ISSUER=${{ secrets.APP_STORE_CONNECT_API_ISSUER }}
            TEAMS_INCOMING_WEBHOOK_URL=${{ secrets.TEAMS_INCOMING_WEBHOOK_URL }}
            TESTFLIGHT_URL=${{ secrets.TESTFLIGHT_URL }}
            VITE_RELEASE_NOTES_PAT_TOKEN=${{ secrets.VITE_RELEASE_NOTES_PAT_TOKEN }}
            AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
            AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
            EOF
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        shell: bash

      - name: Upload secrets as artifact
        uses: actions/upload-artifact@v4
        with:
          name: all-secrets-dev.txt
          path: all-secrets-dev.txt
          retention-days: 1 

  get_secrets_production:
    runs-on: macos-latest
    environment: production

    steps:
      - name: Write all secrets to a file and upload to S3
        run: |
          set -x
          cat <<EOF > all-secrets-prod.txt
            MAC_INSTALLER_CERT=${{ secrets.MAC_INSTALLER_CERT }}
            MAC_INSTALLER_CERT_PASSWORD=${{ secrets.MAC_INSTALLER_CERT_PASSWORD }}
            KEYCHAIN_PASSWORD=${{ secrets.KEYCHAIN_PASSWORD }}
            TAURI_PRIVATE_KEY=${{ secrets.TAURI_PRIVATE_KEY }}
            TAURI_KEY_PASSWORD=${{ secrets.TAURI_KEY_PASSWORD }}
            PR_GITHUB_TOKEN=${{ secrets.PR_GITHUB_TOKEN }}
            APP_STORE_CONNECT_API_KEY=${{ secrets.APP_STORE_CONNECT_API_KEY }}
            APP_STORE_CONNECT_API_KEY_ID=${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}
            APP_STORE_CONNECT_API_ISSUER=${{ secrets.APP_STORE_CONNECT_API_ISSUER }}
            TEAMS_INCOMING_WEBHOOK_URL=${{ secrets.TEAMS_INCOMING_WEBHOOK_URL }}
            TESTFLIGHT_URL=${{ secrets.TESTFLIGHT_URL }}
            VITE_RELEASE_NOTES_PAT_TOKEN=${{ secrets.VITE_RELEASE_NOTES_PAT_TOKEN }}
            AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
            AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
            EOF
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        shell: bash

      - name: Upload secrets as artifact
        uses: actions/upload-artifact@v4
        with:
          name: all-secrets-prod.txt
          path: all-secrets-prod.txt
          retention-days: 1


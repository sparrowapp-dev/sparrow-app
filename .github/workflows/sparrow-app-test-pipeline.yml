# File: .github/workflows/sparrow-app-test-pipeline.yml
# This file is used to test the Sparrow App build and release process. Change this file to trigger the test pipeline for Sparrow App.
# It is triggered on push to the <branch_name> branch. Change the branch name to trigger the test pipeline.

name: Test release

on:
  push:
    # Trigger on push to the <branch_name> branch. Make sure to remove the branch name from the branches list below, once you are done testing.
    branches:
      - dev/codeowners

  workflow_dispatch:

env:
  VITE_API_URL: ${{vars.VITE_API_URL}}
  VITE_MIX_PANEL_TOKEN: ${{vars.VITE_MIX_PANEL_TOKEN}}
  VITE_ENABLE_MIX_PANEL: ${{vars.VITE_ENABLE_MIX_PANEL}}
  VITE_API_TIMEOUT: ${{vars.VITE_API_TIMEOUT}}
  VITE_SPARROW_SUPPORT_EMAIL: ${{ vars.VITE_SPARROW_SUPPORT_EMAIL }}
  VITE_AUTH_URL: ${{ vars.VITE_AUTH_URL }}
  VITE_SPARROW_GITHUB: ${{ vars.VITE_SPARROW_GITHUB }}
  VITE_SPARROW_DOWNLOAD_LINK: ${{ vars.VITE_SPARROW_DOWNLOAD_LINK }}
  VITE_RELEASE_NOTES_PAT_TOKEN: ${{ secrets.VITE_RELEASE_NOTES_PAT_TOKEN }}
  VITE_RELEASE_NOTES_API: ${{ vars.VITE_RELEASE_NOTES_API }}
  VITE_AZURE_CDN_URL: ${{ vars.VITE_AZURE_CDN_URL }}
  VITE_AZURE_INSIGHTS_CONNECTION_STRING: ${{ vars.VITE_AZURE_INSIGHTS_CONNECTION_STRING }}
  VITE_CANNY_API: ${{ vars.VITE_CANNY_API }}
  VITE_CANNY_URL: ${{ vars.VITE_CANNY_URL }}
  VITE_BASE_URL: ${{ vars.VITE_BASE_URL }}
  VITE_SPARROW_LINKEDIN: ${{ vars.VITE_SPARROW_LINKEDIN }}
  VITE_WEB_SOCKET_IO_API_URL: ${{ vars.VITE_WEB_SOCKET_IO_API_URL }}
  VITE_SPARROW_DOCS: ${{ vars.VITE_SPARROW_DOCS }}
  VITE_SPARROW_AI_WEBSOCKET: ${{ vars.VITE_SPARROW_AI_WEBSOCKET }}
  VITE_APP_ENVIRONMENT_PATH: ${{ vars.VITE_APP_ENVIRONMENT_PATH }}
  VITE_CANNY_FEEDBACK_URL: ${{ vars.VITE_CANNY_FEEDBACK_URL }}
  VITE_SPARROW_WEB_APP_URL: ${{ vars.VITE_SPARROW_WEB_APP_URL }}
  VITE_MARKETING_URL: ${{ vars.VITE_MARKETING_URL }}
  VITE_SENTRY_DSN: ${{ vars.VITE_SENTRY_DSN }}
  VITE_APP_ENVIRONMENT: ${{ vars.VITE_APP_ENVIRONMENT }}
  VITE_POSTHOG_CONNECTION_API_KEY: ${{ vars.VITE_POSTHOG_CONNECTION_API_KEY }}
  VITE_POSTHOG_API_URL: ${{ vars.VITE_POSTHOG_API_URL }}
  VITE_SPARROW_ADMIN_URL: ${{ vars.VITE_SPARROW_ADMIN_URL }}
  ACTIONS_ALLOW_UNSECURE_COMMANDS: true
  CI: false
  SNAPCRAFT_STORE_CREDENTIALS: ${{ vars.SNAPCRAFT_STORE_CREDENTIALS }}

jobs:
  release_win:
    runs-on: windows-latest
    environment: production

    steps:
      # --- STAGE 1: INITIAL SETUP AND PREREQUISITE INSTALLATIONS ---
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Windows SDK
        run: Invoke-WebRequest -Uri https://aka.ms/winsdk/10/latest/SdkSetup.exe -OutFile $env:TEMP\SdkSetup.exe
        shell: powershell

      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: "20.8"

      - name: Install Rust 1.82.0
        run: |
          Invoke-WebRequest -Uri https://static.rust-lang.org/rustup/dist/x86_64-pc-windows-msvc/rustup-init.exe -OutFile rustup-init.exe
          .\rustup-init.exe -y
          rustup install 1.82.0
          rustup default 1.82.0

      # Set up DigiCert certificate for cloud signing
      - name: Set up DigiCert certificate
        shell: pwsh
        run: |
          Write-Host "Decoding DigiCert .p12 into D:\Certificate_pkcs12.p12"
          $bytes = [Convert]::FromBase64String("${{ secrets.SM_CLIENT_CERT_FILE_B64 }}")
          [IO.File]::WriteAllBytes("D:\Certificate_pkcs12.p12", $bytes)

      # Set environment variables for DigiCert
      - name: Set variables
        id: variables
        run: |
          echo "SM_HOST=${{ secrets.SM_HOST }}" >> "$GITHUB_ENV"
          echo "SM_API_KEY=${{ secrets.SM_API_KEY }}" >> "$GITHUB_ENV"
          echo "SM_CLIENT_CERT_FILE=D:\\Certificate_pkcs12.p12" >> "$GITHUB_ENV"
          echo "SM_CLIENT_CERT_PASSWORD=${{ secrets.SM_CLIENT_CERT_PASSWORD }}" >> "$GITHUB_ENV"
        shell: bash

      # Setup Android SDK (required by DigiCert action for compatibility)
      - name: Setup Android SDK (for DigiCert action compatibility)
        run: |
          # Create minimal Android SDK structure to satisfy DigiCert action requirements
          $androidSdkPath = "C:\Android\android-sdk"
          $buildToolsPath = "$androidSdkPath\build-tools\30.0.2"
          
          Write-Host "Creating Android SDK directory structure..." -ForegroundColor Yellow
          New-Item -ItemType Directory -Path $buildToolsPath -Force
          
          # Create dummy files that the DigiCert action expects to find
          Write-Host "Creating required Android build tool files..." -ForegroundColor Yellow
          New-Item -ItemType File -Path "$buildToolsPath\apksigner.bat" -Force
          New-Item -ItemType File -Path "$buildToolsPath\zipalign.exe" -Force
          New-Item -ItemType File -Path "$buildToolsPath\aapt.exe" -Force
          New-Item -ItemType File -Path "$buildToolsPath\aapt2.exe" -Force
          
          # Set Android environment variables
          echo "ANDROID_HOME=$androidSdkPath" >> $env:GITHUB_ENV
          echo "ANDROID_SDK_ROOT=$androidSdkPath" >> $env:GITHUB_ENV
          
          Write-Host "Android SDK structure created successfully" -ForegroundColor Green
        shell: powershell

      # Install DigiCert Signing Manager Tools
      - name: Install DigiCert Signing Manager Tools
        uses: digicert/ssm-code-signing@v1.0.0

      - name: Extract first KeyPair alias
        id: extract_alias
        shell: pwsh
        run: |
          $line  = (smctl keypair ls | Select-Object -Skip 2 | Select-Object -First 1)
          $alias = ($line -split '\s{2,}')[2]
          Write-Host "✅ Using alias: $alias"
          "KEYPAIR_ALIAS=$alias" | Out-File -FilePath $env:GITHUB_ENV -Encoding ascii
      
      - name: Sync Certificate into Windows Store
        shell: pwsh
        run: |
          Write-Host "🔄 Syncing cert for alias: $($env:KEYPAIR_ALIAS)"
          smctl windows certsync `
            --keypair-alias="$($env:KEYPAIR_ALIAS)" `
            --store=system

      # --- STAGE 2: BUILD APP ---
      - name: Update updater endpoint in tauri.conf.json file
        run: |
          $content = Get-Content apps/@sparrow-desktop/src-tauri/tauri.conf.json -Raw
          $newContent = $content -replace '"https://{{UPDATER_URL}}/updater/{{target}}/{{arch}}/{{current_version}}"', '"https://${{ secrets.UPDATER_ENDPOINT_PROD }}/updater/{{target}}/{{arch}}/{{current_version}}"'
          Set-Content -Path apps/@sparrow-desktop/src-tauri/tauri.conf.json -Value $newContent
        shell: pwsh

      - name: Increase Yarn network timeout
        run: yarn config set network-timeout 600000


      - name: Build Tauri App
        run: |
          yarn cache clean
          npm install -g pnpm
          yarn install
          yarn desktop-build
        env:
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
          GITHUB_TOKEN: ${{ secrets.PR_GITHUB_TOKEN }}



      # --- STAGE 4: CONVERT TO MSIX USING MAKEAPPX ---
      - name: Prepare App Folder for MakeAppx
        run: |
          New-Item -ItemType Directory -Force -Path "app-root/Assets"
          $msiPath = Get-ChildItem -Path "apps/@sparrow-desktop/src-tauri/target/debug/bundle/msi" -Filter "Sparrow_*_x64_en-US.msi" | Select-Object -First 1
          $extractPath = "app-root"
          Start-Process msiexec.exe -ArgumentList "/a `"$msiPath`" /qn TARGETDIR=`"$extractPath`"" -Wait -NoNewWindow

          $exeSource = Get-ChildItem -Path "apps/@sparrow-desktop/src-tauri/target/debug" -Filter "Sparrow.exe" -Recurse | Select-Object -First 1
          if ($exeSource) {
            Copy-Item $exeSource.FullName -Destination "app-root/Sparrow.exe"
          } else {
            Set-Content -Path "app-root/Sparrow.exe" -Value "placeholder"
          }

          $logo = "apps/@sparrow-desktop/src-tauri/icons/StoreLogo.png"
          Copy-Item $logo -Destination "app-root/Assets/StoreLogo.png"
          Copy-Item $logo -Destination "app-root/Assets/Square150x150Logo.png"
          Copy-Item $logo -Destination "app-root/Assets/Square44x44Logo.png"
          Copy-Item $logo -Destination "app-root/Assets/SplashScreen.png"
        shell: powershell

      - name: Ensure app-root directory exists
        run: |
          New-Item -ItemType Directory -Force -Path "app-root"
        shell: pwsh      
      - name: Generate AppxManifest.xml with version injection
        shell: pwsh
        run: |
          $cargoFile = "apps/@sparrow-desktop/src-tauri/Cargo.toml"
          $versionLine = Select-String -Path $cargoFile -Pattern '^\s*version\s*=\s*"(.*?)"' | Select-Object -First 1
          $version = $versionLine.Matches.Groups[1].Value

          $thumb = "${{ secrets.SM_CODE_SIGNING_CERT_SHA1_HASH }}"
          $cert = Get-ChildItem Cert:\LocalMachine\My | Where-Object Thumbprint -eq $thumb
          $publisherDN = $cert.Subject

          $manifest = @"
          <?xml version="1.0" encoding="utf-8"?>
          <Package xmlns="http://schemas.microsoft.com/appx/manifest/foundation/windows10"
                  xmlns:mp="http://schemas.microsoft.com/appx/2014/phone/manifest"
                  xmlns:uap="http://schemas.microsoft.com/appx/manifest/uap/windows10"
                  xmlns:rescap="http://schemas.microsoft.com/appx/manifest/foundation/windows10/restrictedcapabilities"
                  IgnorableNamespaces="uap mp rescap">
            <Identity Name="Sparrow"
                      Publisher="$publisherDN"
                      Version="$version.0"
                      ProcessorArchitecture="x64" />
            <Properties>
              <DisplayName>Sparrow</DisplayName>
              <PublisherDisplayName>sparrowapp</PublisherDisplayName>
              <Description>Sparrow</Description>
              <Logo>Assets\StoreLogo.png</Logo>
            </Properties>
            <Dependencies>
              <TargetDeviceFamily Name="Windows.Desktop" MinVersion="10.0.0.0" MaxVersionTested="10.0.19041.0" />
            </Dependencies>
            <Resources>
              <Resource Language="en-us" />
            </Resources>
            <Capabilities>
              <rescap:Capability Name="runFullTrust" />
            </Capabilities>
            <Applications>
              <Application Id="SparrowApp" Executable="Sparrow.exe" EntryPoint="Windows.FullTrustApplication">
                <uap:VisualElements DisplayName="Sparrow"
                                    Description="Sparrow App"
                                    BackgroundColor="transparent"
                                    Square150x150Logo="Assets\Square150x150Logo.png"
                                    Square44x44Logo="Assets\Square44x44Logo.png">
                </uap:VisualElements>
              </Application>
            </Applications>
          </Package>
          "@

          $manifest | Set-Content -Encoding UTF8 -Path "app-root\AppxManifest.xml"

      - name: Create MSIX Package using MakeAppx
        run: |
          New-Item -ItemType Directory -Force -Path "msix-output"
          $msixPath = "msix-output\sparrow.msix"

          $makeAppx = Get-ChildItem -Path 'C:\Program Files (x86)\Windows Kits\10\bin' -Recurse -Filter MakeAppx.exe -ErrorAction SilentlyContinue |
                      Where-Object { $_.FullName -match '\\x64\\MakeAppx\.exe$' } |
                      Sort-Object LastWriteTime -Descending |
                      Select-Object -First 1

          & "$($makeAppx.FullName)" pack /d "app-root" /p $msixPath
        shell: powershell

      - name: Generate App Installer File
        id: generate_appinstaller
        run: |
          $manifestPath = "app-root\AppxManifest.xml"
          [xml]$manifest = Get-Content $manifestPath
          $identityName = $manifest.Package.Identity.Name
          $publisher = $manifest.Package.Identity.Publisher
          $version = $manifest.Package.Identity.Version
          $architecture = $manifest.Package.Identity.ProcessorArchitecture

          # Get MSI file name for consistent naming - fix path
          $msiFile = Get-ChildItem -Path "apps\@sparrow-desktop\src-tauri\target\release\bundle\msi" -Filter "Sparrow_*_x64_en-US.msi" -ErrorAction SilentlyContinue | Select-Object -First 1
          if (-not $msiFile) {
            $msiFile = Get-ChildItem -Path "apps\@sparrow-desktop\src-tauri\target\debug\bundle\msi" -Filter "Sparrow_*_x64_en-US.msi" | Select-Object -First 1
          }
          $msiBaseName = [System.IO.Path]::GetFileNameWithoutExtension($msiFile.Name)
          
          $msixUrl = "https://sparrow-assest.s3.us-east-1.amazonaws.com/desktop/$msiBaseName.msix"
          $appInstallerUrl = "https://sparrow-assest.s3.us-east-1.amazonaws.com/desktop/Sparrow.appinstaller"

          $appInstallerContent = @"
          <?xml version="1.0" encoding="utf-8"?>
          <AppInstaller
              xmlns="http://schemas.microsoft.com/appx/appinstaller/2017/2"
              Version="1.0.0.0"
              Uri="$appInstallerUrl">

            <MainPackage
                Name="$identityName"
                Publisher="$publisher"
                Version="$version"
                ProcessorArchitecture="$architecture"
                Uri="$msixUrl" />

            <UpdateSettings>
              <OnLaunch HoursBetweenUpdateChecks="0" UpdateBlocksActivation="true" />
              <AutomaticBackgroundTask />
            </UpdateSettings>
          </AppInstaller>
          "@

          Set-Content -Path "Sparrow.appinstaller" -Value $appInstallerContent -Encoding UTF8
          echo "MSIX_BASE_NAME=$msiBaseName" >> $env:GITHUB_ENV
        shell: pwsh


      # --- STAGE 5: SIGN AND VERIFY MSIX ---
      - name: Find and Sign MSIX files
        shell: pwsh
        run: |
          # 1. Sync certificate into Windows store
          smctl windows certsync --keypair-alias="$env:KEYPAIR_ALIAS"

          # Find SignTool
          $signTool = Get-ChildItem 'C:\Program Files (x86)\Windows Kits\10\bin' -Recurse -Filter signtool.exe |
                      Where-Object FullName -Match '\\x64\\signtool\.exe$' |
                      Sort-Object LastWriteTime -Descending |
                      Select-Object -First 1 -ExpandProperty FullName
          Write-Host "Using SignTool at: $signTool"

          # 3. Sign all MSIX packages - fix path
          $certThumb = "${{ secrets.SM_CODE_SIGNING_CERT_SHA1_HASH }}"
          Get-ChildItem -Path "msix-output" -Filter "*.msix" | ForEach-Object {
            Write-Host "🔐 Signing: $($_.FullName)"
            
            & "$signTool" sign /v /debug /sm /sha1 $certThumb /td SHA256 /fd sha256 /tr http://timestamp.digicert.com "$($_.FullName)"
            
            if ($LASTEXITCODE -ne 0) {
              Write-Host "❌ Failed to sign $($_.Name)"
              exit 1
            }
            Write-Host "✅ Successfully signed $($_.Name)"
          }

      - name: Verify MSIX Signature
        run: |
          # ADDED: List all files in msix-output for debugging
          Write-Host "📁 Contents of msix-output directory:"
          Get-ChildItem -Path "msix-output" -Force | ForEach-Object { Write-Host "  $($_.Name)" }
          
          # Verify the MSIX file exists - fix path
          if (-Not (Test-Path "msix-output\sparrow.msix")) {
              Write-Host "❌ MSIX file not found at msix-output\sparrow.msix"
              Write-Host "📁 Available files:"
              Get-ChildItem -Path "msix-output" | ForEach-Object { Write-Host "  - $($_.Name)" }
              exit 1
          }

          Write-Host "Verifying signature for: msix-output\sparrow.msix"

          # Get the Authenticode signature
          $sig = Get-AuthenticodeSignature -FilePath "msix-output\sparrow.msix"

          # Check the signature status
          if ($sig.Status -eq 'Valid') {
              Write-Host "Valid signature on msix-output\sparrow.msix"
          } else {
              Write-Host "Invalid signature on msix-output\sparrow.msix: $($sig.Status)"
              exit 1
          }
        shell: powershell

      # --- STAGE 6: DEPLOY & NOTIFY ---
      - name: Upload to S3
        shell: pwsh
        run: |
          # ADDED: Debug - list all MSIX files
          Write-Host "📁 Available MSIX files:"
          Get-ChildItem -Path "msix-output" -Filter "*.msix" | ForEach-Object { Write-Host "  - $($_.Name)" }
          
          # Find the actual MSIX file (might not be named sparrow.msix)
          $msixFile = Get-ChildItem -Path "msix-output" -Filter "*.msix" | Select-Object -First 1
          if (-not $msixFile) {
            Write-Host "❌ No MSIX files found in msix-output directory"
            exit 1
          }
          
          $msixOriginal = $msixFile.FullName
          $msixNewName = "$env:MSIX_BASE_NAME.msix"
          $msixNewPath = Join-Path -Path "msix-output" -ChildPath $msixNewName
          
          Write-Host "🔄 Renaming: $($msixFile.Name) -> $msixNewName"
          Rename-Item -Path $msixOriginal -NewName $msixNewName
          
          # Upload MSIX and App Installer files to S3
          # CHANGED: windows/ -> desktop/ for better naming
          aws s3 cp $msixNewPath s3://sparrow-assest/desktop/
          aws s3 cp "Sparrow.appinstaller" s3://sparrow-assest/desktop/
          
          Write-Host "Uploaded $msixNewName and Sparrow.appinstaller to S3 bucket"
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        
      - name: Post Windows Build Links to Teams
        run: |
          # Get file URLs - fix paths
          $msiFile = Get-ChildItem -Path "apps\@sparrow-desktop\src-tauri\target\release\bundle\msi" -Filter "Sparrow_*_x64_en-US.msi" -ErrorAction SilentlyContinue | Select-Object -First 1
          if (-not $msiFile) {
            $msiFile = Get-ChildItem -Path "apps\@sparrow-desktop\src-tauri\target\debug\bundle\msi" -Filter "Sparrow_*_x64_en-US.msi" | Select-Object -First 1
          }
          $msiBaseName = [System.IO.Path]::GetFileNameWithoutExtension($msiFile.Name)
          # CHANGED: windows/ -> desktop/ for better naming
          $msiUrl = "https://sparrow-assest.s3.amazonaws.com/desktop/$msiBaseName.msi"

          $exeFile = Get-ChildItem -Path "apps\@sparrow-desktop\src-tauri\target\release\bundle\nsis" -Filter "Sparrow_*_x64-setup.exe" -ErrorAction SilentlyContinue | Select-Object -First 1
          if (-not $exeFile) {
            $exeFile = Get-ChildItem -Path "apps\@sparrow-desktop\src-tauri\target\debug\bundle\nsis" -Filter "Sparrow_*_x64-setup.exe" | Select-Object -First 1
          }
          $exeBaseName = [System.IO.Path]::GetFileNameWithoutExtension($exeFile.Name)
          # CHANGED: windows/ -> desktop/ for better naming
          $exeUrl = "https://sparrow-assest.s3.amazonaws.com/desktop/$exeBaseName.exe"

          # CHANGED: windows/ -> desktop/ for better naming
          $msixUrl = "https://sparrow-assest.s3.amazonaws.com/desktop/$msiBaseName.msix"
          $appInstallerUrl = "https://sparrow-assest.s3.amazonaws.com/desktop/Sparrow.appinstaller"
          

          $body = @{
            "type" = "message"
            "attachments" = @(
              @{
                "contentType" = "application/vnd.microsoft.card.adaptive"
                "content" = @{
                  "type" = "AdaptiveCard"
                  "body" = @(
                    @{
                      "type" = "TextBlock"
                      "text" = "🚀 New Windows Build Available"
                      "weight" = "bolder"
                      "size" = "large"
                    }
                    @{
                      "type" = "TextBlock"
                      "text" = "📦 Install via App Installer (Click to install directly):"
                      "weight" = "bolder"
                      "spacing" = "medium"
                    }
                    @{
                      "type" = "ColumnSet"
                      "columns" = @(
                        @{
                          "type" = "Column"
                          "width" = "stretch"
                          "items" = @(
                            @{
                              "type" = "TextBlock"
                              "text" = "🚀 [Install Sparrow (One-Click)]($appInstallerUrl)"
                              "color" = "accent"
                              "wrap" = $true
                              "weight" = "bolder"
                            }
                            @{
                              "type" = "TextBlock"
                              "text" = "Alternative Downloads:"
                              "spacing" = "medium"
                              "weight" = "bolder"
                            }
                            @{
                              "type" = "TextBlock"
                              "text" = "📦 [MSIX Package]($msixUrl)"
                              "color" = "accent"
                              "wrap" = $true
                            }
                          )
                        }
                      )
                    }
                    @{
                      "type" = "ColumnSet"
                      "columns" = @(
                        @{
                          "type" = "Column"
                          "width" = "stretch"
                          "items" = @(
                            @{
                              "type" = "TextBlock"
                              "text" = "[MSI Installer]($msiUrl)"
                              "color" = "accent"
                              "wrap" = $true
                            }
                          )
                        }
                      )
                    }
                    @{
                      "type" = "ColumnSet"
                      "columns" = @(
                        @{
                          "type" = "Column"
                          "width" = "stretch"
                          "items" = @(
                            @{
                              "type" = "TextBlock"
                              "text" = "[EXE Installer]($exeUrl)"
                              "color" = "accent"
                              "wrap" = $true
                            }
                          )
                        }
                      )
                    }
                  )
                  "$schema" = "http://adaptivecards.io/schemas/adaptive-card.json"
                  "version" = "1.2"
                }
              }
            )
          }
          
          $jsonBody = $body | ConvertTo-Json -Depth 10

          Invoke-RestMethod -Uri "${{ secrets.TEAMS_INCOMING_WEBHOOK_URL }}" -Method Post -Body $jsonBody -ContentType 'application/json'
        shell: pwsh

 



      
    
     
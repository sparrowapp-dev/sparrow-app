# File: .github/workflows/sparrow-app-test-pipeline.yml
# This file is used to test the Sparrow App build and release process. Change this file to trigger the test pipeline for Sparrow App.
# It is triggered on push to the <branch_name> branch. Change the branch name to trigger the test pipeline.

name: Test release

on:
  push:
    # Trigger on push to the <branch_name> branch. Make sure to remove the branch name from the branches list below, once you are done testing.
    branches:
      - build/app-store-build
  workflow_dispatch:

env:
  VITE_API_URL: ${{ vars.VITE_API_URL_DEV }}
  VITE_MIX_PANEL_TOKEN: ${{ vars.VITE_MIX_PANEL_TOKEN }}
  VITE_ENABLE_MIX_PANEL: ${{ vars.VITE_ENABLE_MIX_PANEL_DEV }}
  VITE_API_TIMEOUT: ${{ vars.VITE_API_TIMEOUT }}
  VITE_SPARROW_SUPPORT_EMAIL: ${{ vars.VITE_SPARROW_SUPPORT_EMAIL }}
  VITE_AUTH_URL: ${{ vars.VITE_AUTH_URL_DEV }}
  VITE_SPARROW_GITHUB: ${{ vars.VITE_SPARROW_GITHUB }}
  VITE_SPARROW_DOWNLOAD_LINK: ${{ vars.VITE_SPARROW_DOWNLOAD_LINK }}
  VITE_RELEASE_NOTES_PAT_TOKEN: ${{ secrets.VITE_RELEASE_NOTES_PAT_TOKEN }}
  VITE_RELEASE_NOTES_API: ${{ vars.VITE_RELEASE_NOTES_API }}
  VITE_AZURE_CDN_URL: ${{ vars.VITE_AZURE_CDN_URL }}
  VITE_AZURE_INSIGHTS_CONNECTION_STRING: ${{ vars.VITE_AZURE_INSIGHTS_CONNECTION_STRING }}
  VITE_CANNY_API: ${{ vars.VITE_CANNY_API }}
  VITE_CANNY_URL: ${{ vars.VITE_CANNY_URL }}
  VITE_BASE_URL: ${{ vars.VITE_BASE_URL }}
  VITE_SPARROW_LINKEDIN: ${{ vars.VITE_SPARROW_LINKEDIN }}
  VITE_WEB_SOCKET_IO_API_URL: ${{ vars.VITE_WEB_SOCKET_IO_API_URL }}
  VITE_SPARROW_DOCS: ${{ vars.VITE_SPARROW_DOCS }}
  VITE_SPARROW_AI_WEBSOCKET: ${{ vars.VITE_SPARROW_AI_WEBSOCKET }}
  VITE_APP_ENVIRONMENT_PATH: ${{ vars.VITE_APP_ENVIRONMENT_PATH }}
  VITE_CANNY_FEEDBACK_URL: ${{ vars.VITE_CANNY_FEEDBACK_URL }}
  VITE_SPARROW_WEB_APP_URL: ${{ vars.VITE_SPARROW_WEB_APP_URL }}
  VITE_MARKETING_URL: ${{ vars.VITE_MARKETING_URL }}
  VITE_SENTRY_DSN: ${{ vars.VITE_SENTRY_DSN }}
  VITE_APP_ENVIRONMENT: ${{ vars.VITE_APP_ENVIRONMENT }}
  VITE_POSTHOG_CONNECTION_API_KEY: ${{ vars.VITE_POSTHOG_CONNECTION_API_KEY }}
  VITE_POSTHOG_API_URL: ${{ vars.VITE_POSTHOG_API_URL }}
  VITE_SPARROW_ADMIN_URL: ${{ vars.VITE_SPARROW_ADMIN_URL }}
  ACTIONS_ALLOW_UNSECURE_COMMANDS: true
  CI: false

jobs:

  release_win:
    runs-on: windows-latest
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0  # Ensure prebuilt files are fetched

      # --- SETUP (Keep these) ---
      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'
          
      # - name: Install Jsign
      #   run: |
      #     mkdir C:\jsign
      #     curl -L https://github.com/ebourg/jsign/releases/download/7.0/jsign-7.0.jar -o C:\jsign\jsign-7.0.jar
      #     echo "JIGN_PATH=C:\jsign" | Out-File -Append -FilePath $env:GITHUB_PATH

      # --- SKIP BUILD STEPS ---
      # Remove all Node.js/Rust/Tauri build steps

      # --- USE PRE-BUILT FILES ---
      - name: Copy Pre-built MSI/EXE to Target Directory
        run: |
          # Create the same directory structure Tauri would use
          mkdir -p D:\a\sparrow-app\sparrow-app\apps\@sparrow-desktop\src-tauri\target\debug\bundle\msi\
          mkdir -p D:\a\sparrow-app\sparrow-app\apps\@sparrow-desktop\src-tauri\target\debug\bundle\nsis\
          
          # Copy pre-built files (adjust names as needed)
          cp prebuilt/unsigned/*.msi D:\a\sparrow-app\sparrow-app\apps\@sparrow-desktop\src-tauri\target\debug\bundle\msi/
          cp prebuilt/unsigned/*.exe D:\a\sparrow-app\sparrow-app\apps\@sparrow-desktop\src-tauri\target\debug\bundle\nsis/

      # --- SIGNING STEPS (Keep these) ---
      - name: Set up DigiCert certificate
        shell: pwsh
        run: |
          Write-Host "Decoding DigiCert .p12 into D:\Certificate_pkcs12.p12"
          $bytes = [Convert]::FromBase64String("${{ secrets.SM_CLIENT_CERT_FILE_B64 }}")
          [IO.File]::WriteAllBytes("D:\Certificate_pkcs12.p12", $bytes)
          
      # - name: Sign MSI with Jsign
      #   shell: pwsh
      #   run: |
      #     # Sign using the PKCS#12 keystore
      #     java -jar C:\jsign\jsign-7.0.jar `
      #       --keystore D:\Certificate_pkcs12.p12 `
      #       --storepass "${{ secrets.SM_CLIENT_CERT_PASSWORD }}" `
      #       --storetype PKCS12 `
      #       --alias "private key for pkcs12 certificate" `
      #       --tsaurl http://timestamp.digicert.com `
      #       "D:\a\sparrow-app\sparrow-app\apps\@sparrow-desktop\src-tauri\target\debug\bundle\msi\Sparrow_2.26.0_x64_en-US.msi"

      - name: Set variables
        id: variables
        run: |
          echo "SM_HOST=${{ secrets.SM_HOST }}" >> "$GITHUB_ENV"
          echo "SM_API_KEY=${{ secrets.SM_API_KEY }}" >> "$GITHUB_ENV"
          echo "SM_CLIENT_CERT_FILE=D:\\Certificate_pkcs12.p12" >> "$GITHUB_ENV"
          echo "SM_CLIENT_CERT_PASSWORD=${{ secrets.SM_CLIENT_CERT_PASSWORD }}" >> "$GITHUB_ENV"
        shell: bash

      # 1. Install SMCTL & client libraries instantly
      - name: Install DigiCert Software Trust Manager Tools
        uses: digicert/ssm-code-signing@v1.0.0

      # 2. List all available KeyLocker keypair aliases
      - name: List KeyLocker KeyPairs
        shell: pwsh
        run: |
          Write-Host "ðŸ”Ž Available KeyPair Aliases:"
          smctl keypair ls

      # 3. Extract the first alias into KEYPAIR_ALIAS
      - name: Extract first KeyPair alias
        id: extract_alias
        shell: pwsh
        run: |
          $line  = (smctl keypair ls | Select-Object -Skip 2 | Select-Object -First 1)
          $alias = ($line -split '\s{2,}')[2]
          Write-Host "âœ… Using alias: $alias"
          "KEYPAIR_ALIAS=$alias" | Out-File -FilePath $env:GITHUB_ENV -Encoding ascii

      - name: Sync Certificate into Windows Store
        shell: pwsh
        run: |
          Write-Host "ðŸ”„ Syncing cert for alias: $($env:KEYPAIR_ALIAS)"
          smctl windows certsync `
            --keypair-alias="$($env:KEYPAIR_ALIAS)" `
            --store=system

      - name: Sign MSI with SignTool
        shell: pwsh
        run: |
          $certThumb = "${{ secrets.SM_CODE_SIGNING_CERT_SHA1_HASH }}"
          & "C:\Program Files (x86)\Windows Kits\10\bin\10.0.22621.0\x64\signtool.exe" sign `
            /fd sha256 /td sha256 /tr http://timestamp.digicert.com /td sha256 `
            /sha1 $certThumb `
            "D:\a\sparrow-app\sparrow-app\apps\@sparrow-desktop\src-tauri\target\debug\bundle\msi\Sparrow_2.26.0_x64_en-US.msi"

      - name: Verify MSI Signature
        shell: pwsh
        run: |
          $sig = Get-AuthenticodeSignature "D:\a\sparrow-app\sparrow-app\apps\@sparrow-desktop\src-tauri\target\debug\bundle\msi\Sparrow_2.26.0_x64_en-US.msi"
          if ($sig.Status -ne 'Valid') {
            throw "Signature invalid: $($sig.Status)"
          }
          Write-Host "âœ… MSI successfully signed and valid."